
import {
  f_add_css,
  f_s_css_prefixed,
  o_variables, 
  f_s_css_from_o_variables
} from "https://deno.land/x/f_add_css@1.1/mod.js"

import {
  f_o_html__and_make_renderable,
}
from 'https://deno.land/x/f_o_html_from_o_js@2.9/mod.js'

import {
  f_n_idx_binding_from_params,
  f_o_gpu_gateway, 
  f_o_gpu_gateway__from_simple_fragment_shader,
  f_o_gpu_gateway_webgpu,
  f_o_gpu_gateway_webgpu_dataitem__buffer_from_v_as_type,
  f_o_gpu_texture__from_o_web_api_object,
  f_render_o_gpu_gateway,
  f_render_o_gpu_gateway_webgpu,
  f_s_autogenerated_accessor_functions,
  f_s_binding_declaration__from_o_gpu_gateway_webgpu,
  f_update_data_in_o_gpu_gateway,
  f_update_data_in_o_gpu_gateway_webgpu,
}
from 'https://deno.land/x/gpugateway@0.3/mod.js'

o_variables.n_rem_font_size_base = 1. // adjust font size, other variables can also be adapted before adding the css to the dom
o_variables.n_rem_padding_interactive_elements = 0.5; // adjust padding for interactive elements 
f_add_css(
  `
  body{
      min-height: 100vh;
      min-width: 100vw;
      /* background: rgba(0,0,0,0.84);*/
      display:flex;
      justify-content:center;
  }
  canvas{
      width: 100%;
      height: 100%;
      position:fixed;
      z-index:-1;
  }
  .app{
      max-width: 1000px;
      width:100%;
      height: 100vh;
      display:flex;
      flex-direction: column;
      justify-content:flex-end;
  }
  ${
      f_s_css_from_o_variables(
          o_variables
      )
  }
  `

);

let o_el_vid = document.querySelector('video');
if(!o_el_vid){
    o_el_vid = document.createElement('video');
    document.body.appendChild(o_el_vid)
}
let o_el_canvas = document.querySelector('canvas');
let o_ctx = null;
if(!o_el_canvas){
  o_el_canvas = document.createElement('canvas');
  document.body.appendChild(o_el_canvas);
  
}
o_ctx = o_el_canvas.getContext('2d');

let o_state = {
  a_o_usb_device: [], 
  o_usb_device: null, 
}
window.o_state = o_state
async function startWebcam() {
  try {
    const stream = await navigator.mediaDevices.getUserMedia({
      video: { width: 1920, height: 1080 }
    });
    o_el_vid.srcObject = stream;
  } catch (error) {
    console.error('Error accessing the webcam:', error);
  }
}

// Replace 'ws://example.com/socket' with the URL of your WebSocket server
const o_ws = new WebSocket('ws://localhost:9000');

// Connection opened
o_ws.addEventListener('open', function (event) {
    console.log("WebSocket is open now.");
});

// Listen for messages
o_ws.addEventListener('message', function (event) {
  let v_o = null;
  try {
    v_o = JSON.parse(event.data);
    
  } catch (error) {
    
  }
  if(v_o?.s_stdout__lsusb){
    // console.log(v_o)
    let b_new_device = false;
    let a_o_usb_device = v_o?.s_stdout__lsusb.split('\n').filter(s=>s.includes('Device ')).map(s=>{
      let [
        s_prop_bus,
        s_n_val_bus, 
        s_prop_device, 
        s_n_val_device, 
        s_prop_id, 
        s_val_vendor_id_product_id, 
      ] = s.split(' ');
      if(!o_state.a_o_usb_device.find(o2=>o2?.s_val_vendor_id_product_id == s_val_vendor_id_product_id)){
        b_new_device = true;
      }
      return {
        s_prop_bus,
        n_val_bus: parseInt(s_n_val_bus),
        s_prop_device,
        n_val_device: parseInt(s_n_val_device),
        s_prop_id,
        n_id_vendor : parseInt(`0x${s_val_vendor_id_product_id.split(":").shift()}`, 16),
        n_id_product : parseInt(`0x${s_val_vendor_id_product_id.split(":").pop()}`, 16),
        s_val_vendor_id_product_id, 
        s_lsusbline: s,
        s_name: s.split(' ').slice(6).join(' ')
      }
    })
    // console.log(o_state.a_o_usb_device)
    if(
      b_new_device
      || 
      a_o_usb_device.length != o_state.a_o_usb_device.length //ugly and lazy way to check if usbdevice has been unplugged or plugged
    ){
      o_state.a_o_usb_device = a_o_usb_device
      o_state?.o_js__a_o_usb_device._f_render()
    }
  }
    // console.log('Message from server ', event.data);
});

// Listen for possible errors
o_ws.addEventListener('error', function (event) {
    console.log('WebSocket error: ', event);
});

// Listen for when the socket closes
o_ws.addEventListener('close', function (event) {
    console.log('WebSocket is closed now.');
});



startWebcam();


o_state.f_captureAndSendImage = function() {
  o_ctx.drawImage(o_el_vid, 0, 0, o_el_vid.videoWidth, o_el_vid.videoHeight);
  const s_data_url = o_el_canvas.toDataURL('image/jpeg'); // Converts image to JPEG base64
  console.log(s_data_url)
  o_ws.send(s_data_url)
  // o_ws.send(JSON.stringify({
  //   s_b64_image: s_data_url
  // }));
}


document.body.appendChild(
  await f_o_html__and_make_renderable(
      {
          s_tag: 'div', 
          class: "app",
          a_o: [
              Object.assign(
                  o_state, 
                  {
                      o_js__a_o_usb_device: {
                          f_o_jsh: ()=>{
                              return {
                                  class: "a_o_usb_device",
                                  s_tag: "select", 
                                  onchange: (o_e)=>{
                                    console.log(o_e.target.value)
                                    let o_usb_device = o_state.a_o_usb_device.find(o2=>{
                                      return o2.s_val_vendor_id_product_id == o_e.target.value
                                    });
                                    if(o_usb_device){
                                      o_state.o_usb_device = o_usb_device
                                      console.log(o_usb_device)
                                      o_ws.send(
                                        JSON.stringify({
                                          o_usb_device
                                        })
                                      )
                                    }
                                  },
                                  a_o: [
                                      ...o_state.a_o_usb_device.map(o=>{
                                        console.log(o)
                                          return {
                                              s_tag: "option",
                                              value: o.s_val_vendor_id_product_id, 
                                              innerText: o.s_name
                                          }
                                      })
                                  ]
                              }
                          }
                      }
                  }
              ).o_js__a_o_usb_device,
          ]
      }
  )
);
