
import {
  f_add_css,
  f_s_css_prefixed,
  o_variables, 
  f_s_css_from_o_variables, 
  f_s_hsla
} from "https://deno.land/x/f_add_css@1.2/mod.js"
import {
  O_vec4
}from "https://deno.land/x/vector@1.4/mod.js"
import {
  f_o_html__and_make_renderable,
}
from 'https://deno.land/x/f_o_html_from_o_js@3.0/mod.js'

import {
    f_o_js as f_o_js__notifire, 
    f_o_throw_notification,
    f_clear_all_notifications
}from "https://deno.land/x/f_o_html_from_o_js@3.0/localhost/jsh_modules/notifire/mod.js"

import {
  f_n_idx_binding_from_params,
  f_o_gpu_gateway, 
  f_o_gpu_gateway__from_simple_fragment_shader,
  f_o_gpu_gateway_webgpu,
  f_o_gpu_gateway_webgpu_dataitem__buffer_from_v_as_type,
  f_o_gpu_texture__from_o_web_api_object,
  f_render_o_gpu_gateway,
  f_render_o_gpu_gateway_webgpu,
  f_s_autogenerated_accessor_functions,
  f_s_binding_declaration__from_o_gpu_gateway_webgpu,
  f_update_data_in_o_gpu_gateway,
  f_update_data_in_o_gpu_gateway_webgpu,
}
from 'https://deno.land/x/gpugateway@0.5/mod.js'


let a_s_image_mode = [
  'rgba_normal',
  'rgba_inverted',
  'red_channel_only',
  'green_channel_only', 
  'blue_channel_only', 
  'edge_detection'
]
class O_keyboard_key{
  constructor(
    s_name,
    n_ms_wpn_down, 
    n_ms_wpn_up, 
    b_down, 
    b_down_last
  ){
    this.s_name = s_name,
    this.n_ms_wpn_down = n_ms_wpn_down, 
    this.n_ms_wpn_up = n_ms_wpn_up, 
    this.b_down = b_down
    this.b_down_last = b_down_last 
  }
}


class O_input_font_icon{
  constructor(
    s_name_input, 
    s_char, 
    s_name_font
  ){
    this.s_name_input =     s_name_input, 
    this.s_char =     s_char, 
    this.s_name_font =     s_name_font
  }
}
class O_input_action{
  constructor(
    s_name_action, 
    s_name_input__controller, 
    s_name_char_keyboard, 
    v_b_invert_axis
  ){
    this.s_name_action = s_name_action, 
    this.s_name_input__controller = s_name_input__controller, 
    this.s_name_char_keyboard = s_name_char_keyboard, 
    this.v_b_invert_axis = v_b_invert_axis
  }
}

let f_s_class__from_s_name_font = function(s){
  return s.replaceAll(":", '-').replaceAll(" ", "_");
}
let f_s_path_font_from_s_name_font = function(s){
  return `'./fonts/${s.replaceAll(':', '_-').replaceAll(" ", "_")}/${s.replaceAll('Controller Font: ', 'Controller - ')}.otf'`
  
}

let s_name_font_Controller_Font___Atari_2600 = 'Controller Font: Atari 2600'
let s_name_font_Controller_Font___Microsoft_Xbox_One = 'Controller Font: Microsoft Xbox One'
let s_name_font_Controller_Font___Nintendo_Game_Boy = 'Controller Font: Nintendo Game Boy'
let s_name_font_Controller_Font___Nintendo_GBA = 'Controller Font: Nintendo GBA'
let s_name_font_Controller_Font___Nintendo_NES = 'Controller Font: Nintendo NES'
let s_name_font_Controller_Font___Nintendo_SNES = 'Controller Font: Nintendo SNES'
// i have modified this font and added analog stick x and y axis arrows so <O>, for both L and R analog stick
let s_name_font_Controller_Font___Nintendo_Switch_modified = 'Controller Font: Nintendo Switch modified'
let s_name_font_Controller_Font___Sony_PlayStation_4 = 'Controller Font: Sony PlayStation 4'

let a_s_name_font = [
  s_name_font_Controller_Font___Atari_2600,
  s_name_font_Controller_Font___Microsoft_Xbox_One,
  s_name_font_Controller_Font___Nintendo_Game_Boy,
  s_name_font_Controller_Font___Nintendo_GBA,
  s_name_font_Controller_Font___Nintendo_NES,
  s_name_font_Controller_Font___Nintendo_SNES,
  s_name_font_Controller_Font___Nintendo_Switch_modified,
  s_name_font_Controller_Font___Sony_PlayStation_4,
]

let o_state = {
  b_webcam_available: false,
  o_cursor_virtual: {
    o_trn: {
      n_x: 0,
      n_y: 0
    }
  },
        // "left_meta1_button": '(',//nintendo nes font ('select') 
      // "right_meta1_button": ')',//nintendo nes font ('start') 
  a_o_keyboard_key: [],
  a_o_input_font_icon: [
    new O_input_font_icon(
      "face_button_bottom",
      'x',
      s_name_font_Controller_Font___Sony_PlayStation_4
    ),
    new O_input_font_icon(
      "face_button_right",
      'c',
      s_name_font_Controller_Font___Sony_PlayStation_4
    ),
    new O_input_font_icon(
      "face_button_top",
      't',
      s_name_font_Controller_Font___Sony_PlayStation_4
    ),
    new O_input_font_icon(
      "face_button_left",
      's',
      s_name_font_Controller_Font___Sony_PlayStation_4
    ),
    new O_input_font_icon(
      "right_index_finger_button_r1",
      ']',
      s_name_font_Controller_Font___Sony_PlayStation_4
    ),
    new O_input_font_icon(
      "right_middle_finger_button_r2",
      '}',
      s_name_font_Controller_Font___Sony_PlayStation_4
    ),
    new O_input_font_icon(
      "left_index_finger_button_l1",
      '[',
      s_name_font_Controller_Font___Sony_PlayStation_4
    ),
    new O_input_font_icon(
      "left_middle_finger_button_l2",
      '{',
      s_name_font_Controller_Font___Sony_PlayStation_4
    ),
    new O_input_font_icon(
      "left_stick_button_l3",
      '<',
      s_name_font_Controller_Font___Nintendo_Switch_modified
    ),
    new O_input_font_icon(
      "right_stick_button_r3",
      '>',
      s_name_font_Controller_Font___Nintendo_Switch_modified
    ),
    new O_input_font_icon(
      "left_stick_x_axis",
      'I',
      s_name_font_Controller_Font___Nintendo_Switch_modified
    ),
    new O_input_font_icon(
      "left_stick_y_axis",
      'J',
      s_name_font_Controller_Font___Nintendo_Switch_modified
    ),
    new O_input_font_icon(
      "right_stick_x_axis",
      'K',
      s_name_font_Controller_Font___Nintendo_Switch_modified
    ),
    new O_input_font_icon(
      "right_stick_y_axis",
      'L',
      s_name_font_Controller_Font___Nintendo_Switch_modified
    ),
    new O_input_font_icon(
      "left_meta1_button",
      '{',
      s_name_font_Controller_Font___Nintendo_GBA
    ),
    new O_input_font_icon(
      "center_meta1_button",
      'h',
      s_name_font_Controller_Font___Nintendo_Switch_modified,
    )
    , new O_input_font_icon(
      "right_meta1_button",
      '}',
      s_name_font_Controller_Font___Nintendo_GBA
    ),
    new O_input_font_icon(
      "direction_pad_up",
      'W',
      s_name_font_Controller_Font___Sony_PlayStation_4
    ),
    new O_input_font_icon(
      "direction_pad_down",
      'X',
      s_name_font_Controller_Font___Sony_PlayStation_4
    ),
    new O_input_font_icon(
      "direction_pad_right",
      'D',
      s_name_font_Controller_Font___Sony_PlayStation_4
    ),
    new O_input_font_icon(
      "direction_pad_left",
      'A',
      s_name_font_Controller_Font___Sony_PlayStation_4
    ),
    new O_input_font_icon(
      "direction_pad_values",
      '',
      s_name_font_Controller_Font___Sony_PlayStation_4
    ),
  ],
  o_config: {
    o_input_action: null,
    a_o_input_action: [
      new O_input_action(
        'move_slide_x_plus', 
        'right_stick_x_axis', 
        'l',
        false,
      ),
      new O_input_action(
        'move_slide_x_minus',
        'right_stick_x_axis', 
         'j', 
         false,
       ),
      new O_input_action(
        'move_slide_y_plus',
        'right_stick_y_axis', 
        'i', 
        false,
      ),
      new O_input_action(
        'move_slide_y_minus',
        'right_stick_y_axis', 
         'k', 
         false,
       ),
      new O_input_action(
        'move_focus_plus',
        'left_stick_y_axis', 
        'o', 
        false,
      ),
      new O_input_action(
        'move_focus_minus',
        'left_stick_y_axis', 
         'u',
         false,
       ),
      new O_input_action(
        'move_slide_single_step_x_plus', 
        'direction_pad_right', 
        false,
      ),
      new O_input_action(
        'move_slide_single_step_x_minus', 
       'direction_pad_left', 
        false,
      ),
      new O_input_action(
        'move_slide_single_step_y_plus', 
       'direction_pad_up', 
        false,
      ),
      new O_input_action(
        'move_slide_single_step_y_minus', 
       'direction_pad_down', 
        false,
      ),
      new O_input_action(
        'toggle_settings', 
        'right_meta1_button', 
        'escape',
        false,
      ),
      new O_input_action(
        'hold_down_toggle_image_control', 
        'left_middle_finger_button_l2', 
        'escape',
        false,
      ),
      new O_input_action(
       'reset_image_manipulation', 
        'left_meta1_button', 
        'r',
        false,
      ),
      new O_input_action(
        'move_digital_x_plus', 
        'right_stick_x_axis', 
        'd',
        false,
      ),
      new O_input_action(
        'move_digital_x_minus', 
        'right_stick_x_axis', 
        'a',
        false,
      ),

      new O_input_action(
        'move_digital_y_plus', 
        'right_stick_y_axis', 
        'w',
        false,
      ),
      new O_input_action(
        'move_digital_y_minus', 
        'right_stick_y_axis', 
        's',
        false,
      ),
      new O_input_action(
        'zoom_digital_plus', 
        'left_stick_y_axis', 
        'e',
        false,
      ),
      new O_input_action(
        'zoom_digital_plus', 
        'left_stick_y_axis', 
        'q',
        false,
      ),


    ]
  },
  n_idx_a_s_image_mode: 5,
  a_s_image_mode: a_s_image_mode,
  n_fps: 24,
  b_render__settings: false,
  v_o_input_device: null,
  o_state__notifire: {},
  n_id_timeout: null,
  a_o_usb_device: [], 
  o_usb_device: null, 
  o_trn_nor_mouse_last: [.5,.5],
  o_trn_nor_mouse: [.5,.5], 
  o_trn_nor_mouse_follow: [0.,0.], 
  n_factor_scale: 1., 
  n_factor_brightness: 1., 
  n_factor_contrast: 1.,
  n_factor_gamma: 1.0,// i assume the js webcam capturing api already does gamma correction
  n_x_trn_nor: 0.0,
  n_y_trn_nor: 0.0,
  a_o_webcam: [],
  s_api_key_openai: 'sk-....', 
  s_prompt_image_ai: `
  return information about this image
  , the image is taken with a camera that is connected to a microscope give the response as a json object with the following structure, the prefixes indicate the types (n_... number) (s_... string) (o_... object) (a_[prefix]... array , eg. a_o_... arrray of objects, a_s_... array of strings ) 'n_micrometer_x_axis_approx': the approximate size of the image on the full x axis try to guess based on what you see on this 'a_o_object' (array of objects) an array holding objects , each object represents an object that is seen on the image (if there are multiple same for example bloodcells, only the best visible should be listed here otherwise hundrets of object would need to be listed in the example of bloodcells...), where the json structure of a "o_object" looks like this 's_name' (string) a short string describing the object 'n_x_nor' a normalized number describing the position on the x axis where 1.0 is fully on the right and 0.0 is fully on the left of the image 'n_y_nor' same like n_x_nor for the y axis, 0.0 is fully on the bottom, 1.0 is fully on the top 'n_micrometer_diameter_approx' approximation of the diameter of the circle bounding the object

  's_description' a general description of what can be seen on the image `,
  s_prompt_image_ai_generic: `
  return information about this image,
  
  return the response as a json object that has the following structure, the prefixes indicate the types (n_... number) (s_... string) (o_... object) (a_[prefix]... array , eg. a_o_... arrray of objects, a_s_... array of strings ) 'n_micrometer_x_axis_approx': the approximate size of the image on the full x axis try to guess based on what you see on this 'a_o_object' (array of objects) an array holding objects , each object represents an object that is seen on the image (if there are multiple same for example bloodcells, only the best visible should be listed here otherwise hundrets of object would need to be listed in the example of bloodcells...), where the json structure of a "o_object" looks like this 's_name' (string) a short string describing the object 'n_x_nor' a normalized number describing the position on the x axis where 1.0 is fully on the right and 0.0 is fully on the left of the image 'n_y_nor' same like n_x_nor for the y axis, 0.0 is fully on the bottom, 1.0 is fully on the top 'n_micrometer_diameter_approx' approximation of the diameter of the circle bounding the object

  's_description' a general description of what can be seen on the image `
}
let f_keydown_or_keyup = function(o_e, b_down){
  let v_o = o_state.a_o_keyboard_key.find(o=>o.s_name == o_e.key);
  if(!v_o){
    v_o = new O_keyboard_key(
      o_e.key, 
      0, 
      0, 
      0, 
      false, 
      false,
    )
    o_state.a_o_keyboard_key.push(v_o)
  }
  v_o.b_down_last = v_o.b_down
  let n_ms_wpn = window.performance.now();
  v_o[`n_ms_wpn_${(b_down) ? "down": "up"}`] = n_ms_wpn;
  v_o.n_ms_wpn__last_down_or_up = window.performance.now();
  v_o.b_down = b_down
  // console.log(b_down)
}
window.addEventListener('keydown', (o_e)=>{ f_keydown_or_keyup(o_e, true)})
window.addEventListener('keyup', (o_e)=>{ f_keydown_or_keyup(o_e, false)})

window.addEventListener('mousemove', (o_e)=>{ 

  o_state.o_cursor_virtual.o_trn.n_x = o_e.clientX;
  o_state.o_cursor_virtual.o_trn.n_y = o_e.clientY;
  o_state?.o_js__o_cursor_virtual._f_render();
  // console.log(o_e.target)
  Array.from(document.querySelectorAll('.hoverable')).map(o=>{
    o.classList.remove("hovered")
    return o
  });
  o_e.target.classList.add("hovered");

})

o_variables.o_hsla__fg_hover = new O_vec4(
  0.2, 
  0.3, 
  0.8, 
  0.9
);
o_variables.n_rem_font_size_base = 1. // adjust font size, other variables can also be adapted before adding the css to the dom
o_variables.n_rem_padding_interactive_elements = 0.5; // adjust padding for interactive elements 
window.o_variables = o_variables
f_add_css(
  `
  ${a_s_name_font.map(s=>{
    return `
      @font-face {
        font-family: '${s}';
        src: url(${f_s_path_font_from_s_name_font(s)}) format('opentype');
      }
      .${f_s_class__from_s_name_font(s)}{
        font-family: '${s}';
      }
    `
  }).join('\n')}


  .hoverable {
      display: flex;
      align-items: center;
      justify-content: space-between;
      border: 1px solid ${f_s_hsla(o_variables.o_hsla__fg)};
      padding: 0.5rem;
  }
  .hoverable.hovered{
    color: ${f_s_hsla(o_variables.o_hsla__fg_hover)};
    border: 1px solid ${f_s_hsla(o_variables.o_hsla__fg_hover)};
  }

  body{
      min-height: 100vh;
      min-width: 100vw;
      /* background: rgba(0,0,0,0.84);*/
      display:flex;
      justify-content:center;
  }
  .canvas_container {
      position: fixed;
      width: 100vw;
      height: 100vh;
      z-index:-1;
  }
  canvas{
    width: 100%;
    height: 100%;
    object-fit: contain;
  }
  .app{
      max-width: 1000px;
      width:100%;
      height: 100vh;
      display:flex;
      flex-direction: column;
      justify-content:flex-end;
  }
  video{
    display:none;
  }
  .gamepad_controls {
      
      width: 100%; 
      height: 100%; 
      aspect-ratio:2/1;
      position:relative;
      background: rgba(22,22,22,0.8);
  }
  .keyboard_char {
      padding: 1rem;
      border: 2px solid white;
      border-radius: 10px;
      box-shadow: 6px 3px 0px #858585;
  }
  .gamepad_controls .layer{
    font-size:2rem;
    left: 50%;
    top: 5%;
    position:absolute;
    transform:translate(-50%, -50%)
  }
  .gamepad_controls .svg {
      position:absolute;
      top:50%;
      left:50%;
      width:100%;
      transform: translate(-50%, -50%);
      height: auto; 
  }
  .gamepad_controls .svg path{
    stroke: rgba(222,222,222,0.7);
    stroke-width: 0.3px;
  }
  .line2 {
    height: 50px;
    border-left: 3px solid rgba(222,222,222,0.8);
    position: absolute;
    top: -50px;
    left: 0;
}

  .gamepad_controls .item{
    position:absolute;
    width: 20%;
  }


  .right_meta1_button, .left_meta1_button{
    top: 16%;
    left: 47%;
}
.left_meta1_button{
    left: 53%;
    transform:translate(-120%,0) 
}
  .right_middle_finger_button_r2, .left_middle_finger_button_l2 {
    top: 5%;
    left: calc(50% + 26.5%);
}
.left_middle_finger_button_l2{     left: calc(50% - 26.5%); transform:translate(-120%,0) }

.right_index_finger_button_r1, .left_index_finger_button_l1 {
    top: 12%;
    left: calc(50% + 26.5%);
}
.left_index_finger_button_l1{     left: calc(50% - 26.5%); transform:translate(-120%,0) }

 .face_button_left, .direction_pad_left {
    top: 20%;
    left: calc(50% + 26.5%);
}
.direction_pad_left{     left: calc(50% - 26.5%); transform:translate(-120%,0) }

 .face_button_top, .direction_pad_up {
    top: 27%;
    left: calc(50% + 26.5%);
}
.direction_pad_up{     left: calc(50% - 26.5%); transform:translate(-120%,0) }

 .face_button_right, .direction_pad_right {
    top: 35%;
    left: calc(50% + 26.5%);
}
.direction_pad_right{     left: calc(50% - 26.5%); transform:translate(-120%,0) }

 .face_button_bottom, .direction_pad_down {
    top: 43%;
    left: calc(50% + 26.5%);
}
.direction_pad_down{     left: calc(50% - 26.5%); transform:translate(-120%,0) }

 .right_stick_y_axis, .left_stick_y_axis {
    top: 81%;
    left: calc(45% + 0.0%);
}
.left_stick_y_axis{     left: calc(52% - 0.0%); transform:translate(-120%,0) }



  .text {
      right: 0;
      position: absolute;
  }

  .text2 {
      position: absolute;
      top: -41px;
  }

  .line3 {
      height: 50px;
      border-left: 3px solid rgba(222, 222, 222, 0.8);
      position: absolute;
      top: 0;
      left: 0;
  }
  .o_cursor_virtual{
    width:5vmin;
    height:5vmin; 
    pointer-events: none;
    transform: translate(-50%,-50%);

  }
  .o_cursor_virtual .r1,
  .o_cursor_virtual .r2,
  .o_cursor_virtual .r3{
    position: absolute;
    top:50%;
    left:50%;
    border-radius:50%;
    transform: translate(-50%,-50%);
  }
  .o_cursor_virtual .r1{
    border: 3px solid green;
    width:100%;
    height:100%;
  }
  .o_cursor_virtual .r2{
    border: 1px solid green;
    width:90%;
    height:90%;
  }
  .o_cursor_virtual .r3{
    border: 5px solid green;
    width:5%;
    height:5%;
  }

  ${
      f_s_css_from_o_variables(
          o_variables
      )
  }
  `

);

let o_el_vid = document.querySelector('video');
if(!o_el_vid){
    o_el_vid = document.createElement('video');
    document.body.appendChild(o_el_vid)
}
let o_el_canvas = document.querySelector('canvas');
// let o_ctx = null;
if(!o_el_canvas){
  let o_div = document.createElement('div');
  o_div.className = 'canvas_container'
  o_el_canvas = document.createElement('canvas');
  o_div.appendChild(o_el_canvas)
  document.body.appendChild(o_div);
  window.o_el_canvas = o_el_canvas
}


let n_len_a_o_trn = 50;
let n_idx_a_o_trn = 0;
let o_gpu_gateway = await f_o_gpu_gateway(
    o_el_canvas, 
    `#version 300 es
    in vec4 a_o_vec_position_vertex;
    out vec2 o_trn_nor_pixel;
    void main() {
        gl_Position = a_o_vec_position_vertex;
        o_trn_nor_pixel = (a_o_vec_position_vertex.xy) / 2.0; // Convert from clip space to texture coordinates
    }`,
    `#version 300 es
    precision mediump float;
    in vec2 o_trn_nor_pixel;
    out vec4 fragColor;
    uniform float n_ms_time;
    uniform float n_factor_scale;
    uniform float n_factor_brightness;
    uniform float n_factor_contrast;
    uniform float n_factor_gamma;
    uniform float n_x_trn_nor;
    uniform float n_y_trn_nor;
    uniform float n_idx_a_s_image_mode;
    uniform vec2 o_trn_nor_mouse;
    uniform vec2 o_trn_nor_mouse_last;
    uniform vec2 o_trn_nor_mouse_follow;
    uniform vec2 o_scl_canvas;
    uniform sampler2D image_from_video;

    void main() {
      //o_trn_nor_pixel normalized pixel coordinates from -1.0 -1.0 to 1.0 1.0
      float n_idx_a_s_image_mode_mutable = n_idx_a_s_image_mode;
      vec2 o_trn_nor = vec2(n_x_trn_nor, n_y_trn_nor);
      vec2 o_trn2 = ((o_trn_nor_pixel)+.5);

      if(
        o_trn2.x > 1.
        || o_trn2.x < 0.
        || o_trn2.y > 1.
        || o_trn2.y < 0.
      ){
        fragColor = vec4(vec3(0.), 1.);
        return;
      }
      o_trn2.y = 1.-o_trn2.y;
      vec2 o2 = (o_trn2 *${o_state.a_s_image_mode.length}.);
      vec2 o2f = fract(o2);
      o2f.y = 1.-o2f.y;

      float b_image_modes_preview = float(o2.x <= 1.0);
      if(b_image_modes_preview == 1.0){
        n_idx_a_s_image_mode_mutable = floor(o2.y);
        o_trn2 = o2f;
      }else{
        o_trn2 -= .5;
        o_trn2 *= n_factor_scale;
        o_trn2 += .5;
        o_trn2 += o_trn_nor;

      }
      
      vec4 o_pixel_value_image_from_video = texture(image_from_video, o_trn2); 
      fragColor =o_pixel_value_image_from_video;
      if(n_idx_a_s_image_mode_mutable == ${(o_state.a_s_image_mode.indexOf("rgba_normal"))}.){
        // do nothing 
      }
      if(n_idx_a_s_image_mode_mutable == ${(o_state.a_s_image_mode.indexOf("rgba_inverted"))}.){
        fragColor = vec4(vec3(1.)-fragColor.rgb, 1.);
      }
      if(n_idx_a_s_image_mode_mutable == ${(o_state.a_s_image_mode.indexOf("red_channel_only"))}.){
        fragColor *= vec4(1., 0., 0., 1.);
      }
      if(n_idx_a_s_image_mode_mutable == ${(o_state.a_s_image_mode.indexOf("green_channel_only"))}.){
        fragColor *= vec4(0., 1., 0., 1.);
      }
      if(n_idx_a_s_image_mode_mutable == ${(o_state.a_s_image_mode.indexOf("blue_channel_only"))}.){
        fragColor *= vec4(0., 0., 1., 1.);
      }
      if(n_idx_a_s_image_mode_mutable == ${(o_state.a_s_image_mode.indexOf("edge_detection"))}.){
        vec2 iResolution  = o_scl_canvas;
        vec2 fragCoord = o_trn2 * iResolution;
        vec2 o_scl_krnl = vec2(3.);
        vec2 o_scl_krnl_half = floor(o_scl_krnl/2.);
        float n_elements_krnl = o_scl_krnl.x * o_scl_krnl.y;
        vec2 o_factor_edge = vec2(2.);
        vec2 o_factor_nonedge = vec2(1.);
        vec4 o_blur = vec4(0.);
        vec4 o_sum_sobel_x = vec4(0.);
        vec4 o_sum_sobel_y = vec4(0.);
        for(
            float n_trn_x = - o_scl_krnl_half.x;  
            n_trn_x<o_scl_krnl_half.x+1.;
            n_trn_x+=1.
        ){  
            for(
                float n_trn_y = - o_scl_krnl_half.y;  
                n_trn_y<o_scl_krnl_half.y+1.;
                n_trn_y+=1.
            ){
    
                vec2 o_trn = fragCoord.xy+vec2(n_trn_x, n_trn_y);
                vec4 o_c_b1 = texture(image_from_video, o_trn/iResolution.xy);
                vec2 o_fctr = vec2(
                    (n_trn_y == 0.) ? n_trn_x*o_factor_edge.x : o_factor_nonedge.x*n_trn_x,
                    (n_trn_x == 0.) ? n_trn_y*o_factor_edge.y : o_factor_nonedge.y*n_trn_y
                );
                o_sum_sobel_x += o_c_b1*o_fctr.x;
                o_sum_sobel_y += o_c_b1*o_fctr.y;
                o_blur += o_c_b1;
            }
    
        }
        vec4 o_prod_sobel_x = o_sum_sobel_x*o_sum_sobel_x;
        vec4 o_prod_sobel_y = o_sum_sobel_y*o_sum_sobel_y;
        
        vec4 o_edges = vec4(
            length(o_prod_sobel_x.x+o_prod_sobel_y.x),
            length(o_prod_sobel_x.y+o_prod_sobel_y.y),
            length(o_prod_sobel_x.z+o_prod_sobel_y.z),
            length(o_prod_sobel_x.w+o_prod_sobel_y.w)
        );
          
        o_blur /= n_elements_krnl;
        vec4 o_c_b1 = texture(image_from_video, fragCoord.xy/iResolution.xy);
        fragColor = vec4(o_edges);//*(1.+(1./n_elements_krnl));
        fragColor.w = 1.;
        //fragColor = vec4(o_c_b1)*o_edges;//*(1.+(1./n_elements_krnl));
        //fragColor = vec4(0.)+n*(1./n_elements_krnl);
        // fragColor = (fragColor);
        // fragColor = vec4(length(o_prod_sobel_x.x+o_prod_sobel_y.x));
      }

      // apply the image styles at the end 
      fragColor *= n_factor_brightness;
      fragColor.rgb = ((fragColor.rgb - 0.5) * n_factor_contrast + 0.5);
      fragColor.rgb = pow(fragColor.rgb, vec3(1.0 / n_factor_gamma));
      fragColor.rgb = fract(fragColor.rgb);
      if(
        n_idx_a_s_image_mode_mutable == n_idx_a_s_image_mode
        && b_image_modes_preview == 1.0 
      ){
        vec2 o3 = (o2f - vec2(0.5) - o_trn_nor);
        float n_dist_border = max(abs(o3.x), abs(o3.y))-.5*n_factor_scale;
        n_dist_border = smoothstep(0.0, 0.01, n_dist_border);
        n_dist_border = clamp(0.0, 1.0, n_dist_border);
        n_dist_border = sin(n_dist_border*3.);
        fragColor += vec4(vec3(n_dist_border),1.);
      }
    }
    `,
)

var a_o_trn = new Float32Array(new Array(n_len_a_o_trn*4).fill(0));
var buffer = o_gpu_gateway.o_ctx.createBuffer();

o_gpu_gateway.o_ctx.bindBuffer(o_gpu_gateway.o_ctx.ARRAY_BUFFER, buffer);
o_gpu_gateway.o_ctx.bufferData(o_gpu_gateway.o_ctx.ARRAY_BUFFER, a_o_trn, o_gpu_gateway.o_ctx.STATIC_DRAW);
var o_location_a_o_trn = o_gpu_gateway.o_ctx.getUniformLocation(o_gpu_gateway.o_shader__program, 'a_o_trn');
o_gpu_gateway.o_ctx.uniform4fv(o_location_a_o_trn, a_o_trn);



// o_ctx = o_el_canvas.getContext('2d');


let f_reset_image_manipulation = function(){
  o_state.n_x_trn_nor = 0
  o_state.n_y_trn_nor = 0
  o_state.n_factor_scale = 1
  o_state.n_factor_brightness = 1
  o_state.n_factor_contrast = 1
  o_state.n_factor_gamma = 2.2
}




let f_n_grouped_value = function(
  s_name
){
  let n = 0;
  let o_input_sensor = (o_state.v_o_input_device?.a_o_input_sensor?.find(o=>o.s_name == s_name));
  if(o_input_sensor)
  {
    return o_input_sensor.n_nor;
  }
  // the value could also be enum like
  if(o_state.v_o_input_device?.a_o_input_sensor?.find(o=>o.s_name == 'direction_pad_values')?.v_o_num_str_value?.a_s_name.includes(s_name)){
    n = 1
  }

  return n
}
let f_n_signed_nor_with_threshhold = function(
  s_name, 
  n_threshhold
){  
  let v_o = (o_state?.v_o_input_device?.a_o_input_sensor?.find(o=> o.s_name == s_name ));

  let n_tmp = ((v_o?.n_nor)-.5)*2.;
  if(Math.abs(n_tmp) <= n_threshhold){
    n_tmp = 0
  }
  return n_tmp
}
window.o_state = o_state
let f_try_start_webcam = async function(){
  if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
    console.log("enumerateDevices() not supported, therefore cannot access webcam");
    o_state.b_webcam_available = false;
    return
  }

  try {
    const stream = await navigator.mediaDevices.getUserMedia({
      video: { width: 1920, height: 1080 }
    });
    o_el_vid.srcObject = stream;
    o_state.b_webcam_available = true
    return 

  } catch (error) {
    console.error('Error accessing the webcam:', error);
    o_state.b_webcam_available = false;
    return 
  }
}
async function f_start_render_loop() {

  await f_try_start_webcam();

  let gl = o_gpu_gateway.o_ctx;


  let n_ms_delta_max = 1000/o_state.n_fps;
  let n_ms_last = 0;
  let n_c = 0;
    function f_render() {
      n_c +=1;
      if(n_c == 100){
        f_resize_canvas()
      }
      let n_ms = window.performance.now();
      let n_ms_delta = n_ms - n_ms_last;
      if(n_ms_delta > n_ms_delta_max){
        if (
          (o_state.b_webcam_available && 
          o_el_vid.readyState >= o_el_vid.HAVE_CURRENT_DATA)
          || !o_state.b_webcam_available
          ) {

          let a_o_el_under_cursor_virtual = Array.from(document.querySelectorAll("input")).filter(o=>{

              let o2 = (o.getBoundingClientRect());
              return (o_state.o_cursor_virtual.o_trn.n_x >= o2.left && o_state.o_cursor_virtual.o_trn.n_y >= o2.top)
                  && (o_state.o_cursor_virtual.o_trn.n_x <= o2.left+o2.width && o_state.o_cursor_virtual.o_trn.n_y <= o2.top+o2.height )
          });
          // console.log(a_o_el_under_cursor_virtual)
          // process input from controller 
          let v_o_l2 = (o_state?.v_o_input_device?.a_o_input_sensor?.find(o=> o.s_name == "left_middle_finger_button_l2"));

          let v__o_l1 = (o_state?.v_o_input_device?.a_o_input_sensor?.find(o=> o.s_name == "left_index_finger_button_l1"));
          let v__o_l1__last = (o_state?.v_o_input_device__last?.a_o_input_sensor?.find(o=> o.s_name == "left_index_finger_button_l1"));
          let v__o_r1 = (o_state?.v_o_input_device?.a_o_input_sensor?.find(o=> o.s_name == "right_index_finger_button_r1"));
          let v__o_r1__last = (o_state?.v_o_input_device__last?.a_o_input_sensor?.find(o=> o.s_name == "right_index_finger_button_r1"));

          let v_o__right_meta1_button = (o_state?.v_o_input_device?.a_o_input_sensor?.find(o=> o.s_name == "right_meta1_button"));
          let v_o__right_meta1_button_last = (o_state?.v_o_input_device__last?.a_o_input_sensor?.find(o=> o.s_name == "right_meta1_button"));
          let v_o__left_meta1_button = (o_state?.v_o_input_device?.a_o_input_sensor?.find(o=> o.s_name == "left_meta1_button"));
          let v_o__left_meta1_button_last = (o_state?.v_o_input_device__last?.a_o_input_sensor?.find(o=> o.s_name == "left_meta1_button"));

          let v_o_keyboard_key__esc = null;
          let b_remap_input_action = o_state.o_config.o_input_action != null;
          if(b_remap_input_action){
            // re-map an input 
            let a_o_keyboard_key_not_same_as_last = o_state.a_o_keyboard_key.filter(o=>{
              return o.b_down != o.b_down_last
            });
            let o_keyboard_key = a_o_keyboard_key_not_same_as_last?.[0];
            if(o_keyboard_key){
              o_state.o_config.o_input_action.s_name_char_keyboard = o_keyboard_key.s_name;
              o_state.o_config.o_input_action = null;
              o_state.o_js__a_o_input_mapping._f_render(); 
            }
            let a_o_input_sensor_not_same_as_last = o_state.v_o_input_device.a_o_input_sensor.map(
              (o_input_sensor, n_idx)=>{
                let o_input_sensor__last = o_state.v_o_input_device__last.a_o_input_sensor[n_idx]
                let n_nor_diff = o_input_sensor.n_nor - o_input_sensor__last.n_nor;
                if(n_nor_diff == 0){return false}
                return {
                  n_nor_diff,
                  o_input_sensor
                }
            })
            .filter(v=>v)
            .sort(
              (o1, o2)=>{
               return o2.n_nor_diff-o1.n_nor_diff
              }
            );
              // console.log(a_o_input_sensor_not_same_as_last)
            let o_input_sensor = a_o_input_sensor_not_same_as_last?.[0]?.o_input_sensor;
            if(o_input_sensor){
              o_state.o_config.o_input_action.s_name_input__controller = o_input_sensor.s_name;
              // console.log(o_state.o_config.o_input_action)
              o_state.o_config.o_input_action = null;
              o_state.o_js__a_o_input_mapping._f_render(); 
            }
          }

          if(!b_remap_input_action){

            for(let o_keyboard_key of o_state.a_o_keyboard_key){
              if(o_keyboard_key.s_name == 'Escape'){
                v_o_keyboard_key__esc = o_keyboard_key
              }
              if(
                o_keyboard_key.s_name == 'y'
                && o_keyboard_key?.b_down != o_keyboard_key?.b_down_last
              ){
                let s_event = (o_keyboard_key?.b_down) ? 'click': 'mouseup';
                var o_event = new MouseEvent(s_event, {
                    bubbles: true,
                    cancelable: true,
                    view: window
                });
                console.log(o_event)
                a_o_el_under_cursor_virtual.forEach(o=>{o.dispatchEvent(o_event); o.click()})
              }
              let n_idx = [
                'j', 'l',// x axis - +
                'i', 'k',// y axis - +
                'u', 'o',// z axis - +
              ].indexOf(o_keyboard_key.s_name)
              if(n_idx != -1){
                let s_axis = ['x', 'y', 'z'][parseInt(n_idx/2)]
                let b_direction = n_idx%2 == 0
                let n_sign = (b_direction) ? -1: 1;
    
                if(o_keyboard_key?.b_down){
    
                  o_state.o_cursor_virtual.o_trn[`n_${s_axis}`] += 10 * n_sign;
                  console.log(o_state.o_cursor_virtual.o_trn[`n_${s_axis}`])
                }
    
                if(
                  o_keyboard_key?.b_down == o_keyboard_key?.b_down_last
                  ){
                  continue
                }
    
                let o_js = {
                  s_name_function:'f_control_stepper_motor',
                  s_axis,
                  n_rpm_nor: ((o_keyboard_key?.b_down) ? 0.3: 0.0) ,
                  b_direction
                }
                // console.log(o_js)
                
                o_ws.send(JSON.stringify(o_js))
              }
  
  
            }
            // Array.from(document.querySelectorAll('.hoverable')).map(o=>{
            //   o.classList.remove("hovered")
            //   return o
            // });
  
  
            if(
              (v_o__right_meta1_button?.n_nor == 1.0
              && v_o__right_meta1_button_last?.n_nor == 0.0)
              || (v_o_keyboard_key__esc?.b_down &&  (v_o_keyboard_key__esc?.b_down != v_o_keyboard_key__esc?.b_down_last))
              ){
                o_state.b_render__settings = !o_state.b_render__settings
                if(!o_state.o_js__settings._b_rendering){
                  o_state.o_js__settings._f_render()
                  console.log('asdf')
                }
              }
              
            if(v_o_l2?.n_nor == 1.0){
              //layer 2 camera control
              
              let n_nor_right_stick_x_axis =  f_n_signed_nor_with_threshhold( "right_stick_x_axis", 0.0)
              let n_nor_right_stick_y_axis =  f_n_signed_nor_with_threshhold( "right_stick_y_axis", 0.0)
              let n_nor_left_stick_y_axis =  f_n_signed_nor_with_threshhold( "left_stick_y_axis", 0.0)
              let n_nor_left_stick_x_axis =  f_n_signed_nor_with_threshhold( "left_stick_x_axis", 0.0)
              o_state.o_cursor_virtual.o_trn.n_x += n_nor_left_stick_x_axis*10;
              o_state.o_cursor_virtual.o_trn.n_y += n_nor_left_stick_y_axis*10;
              o_state.o_js__o_cursor_virtual._f_render();
  
              o_state.n_x_trn_nor+=n_nor_right_stick_x_axis*0.02;
              o_state.n_y_trn_nor+=n_nor_right_stick_y_axis*0.02;
              o_state.n_factor_scale+=n_nor_left_stick_y_axis*-0.02;
              o_state.n_factor_contrast-=f_n_grouped_value("direction_pad_down")*0.02;
              o_state.n_factor_contrast+=f_n_grouped_value("direction_pad_up")*0.02;
              o_state.n_factor_gamma+=f_n_grouped_value("direction_pad_right")*0.02;
              o_state.n_factor_gamma-=f_n_grouped_value("direction_pad_left")*0.02;
              let n_summand__n_idx_a_s_image_mode = 0;
              if(
                v__o_l1?.n_nor == 1.0 
                && v__o_l1__last?.n_nor == 0.0
              ){
                n_summand__n_idx_a_s_image_mode = -1
              }
              if(
                v__o_r1?.n_nor == 1.0 
                && v__o_r1__last?.n_nor == 0.0
              ){
                n_summand__n_idx_a_s_image_mode = +1
              }
              if(n_summand__n_idx_a_s_image_mode != 0){
                o_state.n_idx_a_s_image_mode = (o_state.n_idx_a_s_image_mode+n_summand__n_idx_a_s_image_mode);
                if(o_state.n_idx_a_s_image_mode < 0){
                  o_state.n_idx_a_s_image_mode = o_state.a_s_image_mode.length-1
                }
                if(o_state.n_idx_a_s_image_mode > (o_state.a_s_image_mode.length-1)){
                  o_state.n_idx_a_s_image_mode = 0;
                }
                // console.log(o_state.n_idx_a_s_image_mode)
              }
            }
            if(v_o__left_meta1_button_last?.n_nor == 1.0){
              f_reset_image_manipulation();
  
            }
          }



            f_update_data_in_o_gpu_gateway(
                {
                    o_scl_canvas: [
                          o_el_vid?.videoWidth,
                          o_el_vid?.videoHeight
                    ],
                    n_idx_a_s_image_mode: o_state.n_idx_a_s_image_mode, 
                    n_factor_scale: o_state.n_factor_scale,
                    n_x_trn_nor: o_state.n_x_trn_nor,
                    n_y_trn_nor: o_state.n_y_trn_nor,
                    n_factor_brightness: o_state.n_factor_brightness,
                    n_factor_contrast: o_state.n_factor_contrast,
                    n_factor_gamma: o_state.n_factor_gamma,
                    n_ms_time: window.performance.now(), 
                    image_from_video: f_o_gpu_texture__from_o_web_api_object(
                      o_el_vid
                    ),
                }, 
                o_gpu_gateway, 
            )
            f_render_o_gpu_gateway(
                o_gpu_gateway, 
            );
  
            o_state.o_js__o_cursor_virtual._f_render()
            

            // needs to be at the end
            o_state.v_o_input_device__last = o_state.v_o_input_device
            for(let o_keyboard_key of o_state.a_o_keyboard_key){
              o_keyboard_key.b_down_last = o_keyboard_key?.b_down
            }

            // Add your WebGL drawing code here to manipulate the video frame
            // gl.drawArrays(gl.TRIANGLES, 0, 6);
        }
        n_ms_last = n_ms;
      }
      requestAnimationFrame(f_render);

  }
  
  f_render();
  f_resize_canvas();
  f_resize_canvas();
}



window.addEventListener('keydown', async (o_e)=>{
  [
    ['q',"n_factor_scale", + 0.01], 
    ['e',"n_factor_scale", - 0.01],    
    ['w',"n_y_trn_nor", + 0.01],    
    ['s',"n_y_trn_nor", - 0.01],    
    ['a',"n_x_trn_nor", - 0.01],    
    ['d',"n_x_trn_nor", + 0.01],    
    ['r',"n_factor_brightness", - 0.01],    
    ['f',"n_factor_brightness", + 0.01],    
    ['t',"n_factor_contrast", - 0.01],    
    ['g',"n_factor_contrast", + 0.01],    
    ['y',"n_factor_gamma", - 0.01],    
    ['h',"n_factor_gamma", + 0.01]
].map(a_v =>{
  if(o_e.key == a_v[0]){
    o_state[a_v[1]] += a_v[2]
    o_state[`o_js__${a_v[1]}`]._f_render()
  }
})

if(o_e.key == 'm'){
  o_state.n_idx_a_s_image_mode = (o_state.n_idx_a_s_image_mode + 1)%o_state.a_s_image_mode.length;
}
if(o_e.key == ' '){

    await f_o_throw_notification(o_state.o_state__notifire,`image has been saved`, 'success')
  
    o_state.f_captureAndSendImage()
    // Convert canvas to a data URL (Base64 image)
    const s_data_url = o_el_canvas.toDataURL('image/jpeg');

    
    let o_resp = await fetch(
        "https://api.openai.com/v1/chat/completions", 
        {
            headers: {
                "Content-Type":" application/json" ,
                "Authorization":`Bearer ${o_state.s_api_key_openai}`,
            }, 
            body: JSON.stringify(
                {
                    "model": "gpt-4-turbo",
                    "messages": [
                      {
                        "role": "user",
                        "content": [
                          {
                            "type": "text",
                            "text": o_state.s_prompt_image_ai_generic
                          },
                          {
                            "type": "image_url",
                            "image_url": {
                              "url": s_data_url
                            }
                          }
                        ]
                      }
                    ],
                    "max_tokens": 300
                  }
            )
        }
    )   
    let o_parsed = o_resp.json();
    console.log(o_parsed);
    window.o_parsed = o_parsed

}

})
let f_r_ser_w_cli_o_config = async function(){
  //r_ser_w_cli // read server , write client
  let o = await f_o_ws_response({s_name_function: "f_s_json_o_config"});
  let o_config = JSON.parse(o.s_json_o_config);
  let o_config_tmp_original = o_state.o_config;
  o_state.o_config = Object.assign(o_state.o_config, o_config);
  o_state.o_config.a_o_input_action = o_config_tmp_original.a_o_input_action;

  o_state?.o_js__a_o_usb_device?._f_render?.()

  await o
}

// Replace 'ws://example.com/socket' with the URL of your WebSocket server
const o_ws = new WebSocket(`ws${(location.protocol == 'https:')?"s":''}://${location.hostname}:${location.port}/ws`);


// Connection opened
o_ws.addEventListener('open', async function (event) {
    console.log("WebSocket is open now.");
    // let o = await f_o_ws_response({s_name_function: "hello"});
    f_r_ser_w_cli_o_config().then(
      ()=>{
        console.log(o_state.o_config)
        if(o_state.o_config.n_id_product && o_state.o_config.n_id_vendor){
          o_ws.send(
            JSON.stringify({
              s_name_function: "f_switch_usb_device", 
              n_id_vendor: o_state.o_config.n_id_vendor,
              n_id_product: o_state.o_config.n_id_product,
            })
          )
        }
      }
    );
 
});

let f_o_ws_response = async function(
  o_request_data
){
  return new Promise((f_res)=>{

    let s_uuid = crypto.randomUUID();

    let f_socket_handler = (o_e)=>{
      let v_o = null;
      try {
        v_o = JSON.parse(o_e.data);
      } catch (error) {
      }
      if(v_o?.s_uuid == s_uuid){
        o_ws.removeEventListener("message", f_socket_handler)
        return f_res(v_o);
      }
    }
  
    o_ws.addEventListener("message", f_socket_handler);

    console.log({s_uuid})
    o_ws.send(
      JSON.stringify({
        s_uuid: s_uuid, 
        ...o_request_data
      })
    );
  })
}

// Listen for messages
o_ws.addEventListener('message', function (event) {
  let v_o = null;
  try {
    v_o = JSON.parse(event.data);
    
  } catch (error) {
    
  }

  if(v_o?.o_input_device){
    o_state.v_o_input_device = v_o.o_input_device;
  }

    // console.log('Message from server ', event.data);
});

// Listen for possible errors
o_ws.addEventListener('error', function (event) {
    console.log('WebSocket error: ', event);
});

// Listen for when the socket closes
o_ws.addEventListener('close', function (event) {
    console.log('WebSocket is closed now.');
});





o_state.f_captureAndSendImage = function() {
  // o_el_canvas.width = o_el_vid?.videoWidth
  // o_el_canvas.height = o_el_vid?.videoHeight
  // o_ctx.drawImage(o_el_vid, 0, 0, o_el_vid.videoWidth, o_el_vid.videoHeight);
  
    // Convert canvas to a data URL (Base64 image)
    const s_data_url = o_el_canvas.toDataURL('image/png');
    // Send JSON data to WebSocket server
    o_ws.send(
      JSON.stringify({
        s_data_url: s_data_url,
      })
    );
    
}

let f_resize_canvas = ()=>{
  let n_dpr = window.devicePixelRatio || 1;
  o_el_canvas.width = o_el_vid.videoWidth * n_dpr
  o_el_canvas.height = o_el_vid.videoHeight * n_dpr
  let gl = o_gpu_gateway.o_ctx;
gl.viewport(0, 0, o_el_canvas.width, o_el_canvas.height);
  // f_update_data_in_o_gpu_gateway(
  //     {o_scl_canvas: [
  //         o_el_canvas.width,
  //         o_el_canvas.height
  //     ]}, 
  //     o_gpu_gateway, 
  // )
}

window.addEventListener('resize',()=>{
  f_resize_canvas()
});


try{

  f_start_render_loop();
}catch(o_e){
  console.error(o_e)
}
f_resize_canvas()





window.addEventListener('pointermove', (o_e)=>{
  o_state.o_trn_nor_mouse = [
      (o_e.clientX / window.innerWidth), 
      1.-(o_e.clientY / window.innerHeight), 
  ];

  f_update_data_in_o_gpu_gateway(
      {
          o_trn_nor_mouse: o_state.o_trn_nor_mouse_last,
          o_trn_nor_mouse_last: o_state.o_trn_nor_mouse, 
      }, 
      o_gpu_gateway, 
  )
  o_state.o_trn_nor_mouse_last = o_state.o_trn_nor_mouse
})

let s_svg_original = await (await fetch("./gamepad.svg")).text();

let f_o_svg = function(
  o_s_name_input_s_description, 
  s_layer
){
  let s_svg = s_svg_original;
  let b_face_button_up_down_different = ((
    typeof o_s_name_input_s_description?.face_button_bottom == 'string'
    || typeof o_s_name_input_s_description?.face_button_top == 'string'
    ) && o_s_name_input_s_description?.face_button_bottom != o_s_name_input_s_description?.face_button_top)
    b_face_button_up_down_different = !(o_s_name_input_s_description?.face_button_bottom.trim() == '' || o_s_name_input_s_description?.face_button_top.trim() == '')
    if(!b_face_button_up_down_different){
    s_svg = s_svg.replace(`class="face_button_up_down_single"`, 'class="face_button_up_down_single" display="none"')
    s_svg = s_svg.replace(`class="face_button_up_down_single"`, 'class="face_button_up_down_single" display="none"')

  }else{
    s_svg = s_svg.replace(`class="face_button_up_down_combiner"`, 'class="face_button_up_down_combiner" display="none"')
    s_svg = s_svg.replace(`class="face_button_up_down_single"`, 'class="face_button_up_down_single" display="none"')
  }
  let b_face_button_left_right_different = ((
    typeof o_s_name_input_s_description?.face_button_left == 'string'
    || typeof o_s_name_input_s_description?.face_button_right == 'string'
    ) && o_s_name_input_s_description?.face_button_left != o_s_name_input_s_description?.face_button_right)
    b_face_button_left_right_different = !(o_s_name_input_s_description?.face_button_left.trim() == '' || o_s_name_input_s_description?.face_button_right.trim() == '')
    if(!b_face_button_left_right_different){
    s_svg = s_svg.replace(`class="face_button_left_right_single"`, 'class="face_button_left_right_single" display="none"')
  }else{
    s_svg = s_svg.replace(`class="face_button_left_right_combiner"`, 'class="face_button_left_right_combiner" display="none"')
  }
  
  let b_direction_pad_up_down_different = ((
    typeof o_s_name_input_s_description?.direction_pad_down == 'string'
    || typeof o_s_name_input_s_description?.direction_pad_up == 'string'
    ) && o_s_name_input_s_description?.direction_pad_down != o_s_name_input_s_description?.direction_pad_up)
    b_direction_pad_up_down_different = !(o_s_name_input_s_description?.direction_pad_down.trim() == '' || o_s_name_input_s_description?.direction_pad_up.trim() == '')
    if(!b_direction_pad_up_down_different){
    s_svg = s_svg.replace(`class="direction_pad_up_down_single"`, 'class="direction_pad_up_down_single" display="none"')
  }else{
    s_svg = s_svg.replace(`class="direction_pad_up_down_combiner"`, 'class="direction_pad_up_down_combiner" display="none"')
  }
  let b_direction_pad_left_right_different = ((
    typeof o_s_name_input_s_description?.direction_pad_left == 'string'
    || typeof o_s_name_input_s_description?.direction_pad_right == 'string'
    ) && o_s_name_input_s_description?.direction_pad_left != o_s_name_input_s_description?.direction_pad_right)
    b_direction_pad_left_right_different = !(o_s_name_input_s_description?.direction_pad_left.trim() == '' || o_s_name_input_s_description?.direction_pad_right.trim() == '')

    if(!b_direction_pad_left_right_different){
    s_svg = s_svg.replace(`class="direction_pad_left_right_single"`, 'class="direction_pad_left_right_single" display="none"')
  }else{
    s_svg = s_svg.replace(`class="direction_pad_left_right_combiner"`, 'class="direction_pad_left_right_combiner" display="none"')
  }
  

  return {
    a_o:[   
        {
          class: "gamepad_controls",
          a_o: [
            {
              class: "svg",
              innerHTML: s_svg
            }, 
            {
              class: "layer", 
              innerText: s_layer
            },
            Object.keys(o_s_name_input_s_description).map(s=>{
              return {
                class: `item ${s}`, 
                a_o:[
                  {
                    class: "text", 
                    innerText: o_s_name_input_s_description[s],
                  },
                ]
              }
            })
          ]
        }
    ]
}
}
document.body.appendChild(
  await f_o_html__and_make_renderable(
      {
          s_tag: 'div', 
          style: "font-size: 2rem; ",
          class: "app inputs",
          a_o: [
            ...o_state.a_o_input_font_icon.map(o=>{
              return {
              b_render: (false), //'debug' fonts, show all fonts
                style: 'display:flex;flex-direction:row',

                a_o: [
                  ...a_s_name_font.map(s=>{
                    return {
                      class: f_s_class__from_s_name_font(s), 
                      innerText: o.s_char,
                    }
                  })
                ]
              }
            }),
            f_o_js__notifire( 
                o_state.o_state__notifire
            ), 
            Object.assign(
              o_state,
              {
                  o_js__o_cursor_virtual: {
                      f_o_jsh: ()=>{
                          return {
                              a_o:[   
                                  
                                  {
                                    class: "o_cursor_virtual", 
                                    style: [
                                      `position:fixed`, 
                                      `left: ${o_state.o_cursor_virtual.o_trn.n_x}px`,
                                      `top: ${o_state.o_cursor_virtual.o_trn.n_y}px`,
                                    ].join(';'), 
                                    a_o: [
                                      {
                                        class: "r1", 
                                      }, 
                                      {
                                        class: "r2", 
                                      },
                                      {
                                        class: "r3", 
                                      }
                                    ]
                                  }
                              ]
                          }
                      }
                  }
              }
          
          ).o_js__o_cursor_virtual,



            Object.assign(
              o_state,
              {
                  o_js__settings: {
                      f_o_jsh: ()=>{
                        return {
                          b_render: o_state.b_render__settings,
                          a_o: [


                            {
                              class: "gamepad_controls", 
                              a_o: [
                                //layer1
                                // f_o_svg(
                                //   {
                                //     "left_stick_x_axis":'left_stick_x_axis',
                                //     "left_stick_y_axis":'left_stick_y_axis',
                                //     "right_stick_x_axis":'right_stick_x_axis',
                                //     "right_stick_y_axis":'right_stick_y_axis',
                                //     "direction_pad_up":'direction_pad_up',
                                //     "direction_pad_left":'direction_pad_left',
                                //     "direction_pad_down":'direction_pad_down',
                                //     "direction_pad_right":'direction_pad_right',
                                //     "face_button_bottom":'face_button_bottom',
                                //     "face_button_right":'face_button_right',
                                //     "face_button_left":'face_button_left',
                                //     "face_button_top":'face_button_top',
                                //     "left_index_finger_button_l1":'left_index_finger_button_l1',
                                //     "right_index_finger_button_r1":'right_index_finger_button_r1',
                                //     "left_middle_finger_button_l2":'left_middle_finger_button_l2',
                                //     "right_middle_finger_button_r2":'right_middle_finger_button_r2',
                                //     "left_meta1_button":'left_meta1_button',
                                //     "right_meta1_button":'right_meta1_button',
                                //     "center_meta1_button": 'center_meta1_button',
                                //     "left_stick_button_l3":'left_stick_button_l3',
                                //     "right_stick_button_r3":'right_stick_button_r3',
                                //     "right_middle_finger_button_r2":'right_middle_finger_button_r2',
                                //     "left_middle_finger_button_l2":'left_middle_finger_button_l2',
                                //   },
                                //   `Layer test`
                                //  ),
                                f_o_svg(
                                  {
                                    "left_stick_x_axis":'',
                                    "left_stick_y_axis":'Focus (y)',
                                    "right_stick_x_axis":'',
                                    "right_stick_y_axis":'move slide (x y)',
                                    "direction_pad_up":'',
                                    "direction_pad_left":'',
                                    "direction_pad_down":'Move slide slow (y)',
                                    "direction_pad_right":'Move slide slow (x)',
                                    "face_button_bottom":'Take screenshot',
                                    "face_button_right":'Record video',
                                    "face_button_left":'Ask AI (GPT4)',
                                    "face_button_top":'Focus stack (add image)',
                                    "left_index_finger_button_l1":'',
                                    "right_index_finger_button_r1":'Finish focus stack',
                                    "left_middle_finger_button_l2":'',
                                    "right_middle_finger_button_r2":'Hold down, switch Layer 2',
                                    "left_meta1_button":'Reset image manipulation',
                                    "right_meta1_button":'show controls',
                                    "center_meta1_button": '',
                                    "left_stick_button_l3":'',
                                    "right_stick_button_r3":'',
                                  },
                                  `Layer 1`
                                 ),
                                 f_o_svg(
                                  {
                                    "left_stick_x_axis":'',
                                    "left_stick_y_axis":'Zoom digial (y)',
                                    "right_stick_x_axis":'',
                                    "right_stick_y_axis":'Move digital (x y)',
                                    "direction_pad_up":'',
                                    "direction_pad_left":'',
                                    "direction_pad_down":'Contrast + -',
                                    "direction_pad_right":'Gamma + -',
                                    "face_button_bottom":'',
                                    "face_button_right":'',
                                    "face_button_left":'',
                                    "face_button_top":'',
                                    "left_index_finger_button_l1":'Previous Image mode',
                                    "right_index_finger_button_r1":'Next Image mode',
                                    "left_middle_finger_button_l2":'',
                                    "right_middle_finger_button_r2":'',
                                    "left_meta1_button":'',
                                    "right_meta1_button":'',
                                    "center_meta1_button": '',
                                    "left_stick_button_l3":'',
                                    "right_stick_button_r3":'',
                                  },
                                  `Layer 2 (Image control)`
                                 ),
    
                              ]
                            },
                            Object.assign(
                              o_state, 
                              {
                                o_js__a_o_input_mapping: {
                                  f_o_jsh: ()=>{
                                    return {
                                      class: 'a_o_input_mapping', 
                                      a_o: [
                                        
                                        ...o_state.o_config.a_o_input_action.map(o=>{
                                          let v_o_input_font = o_state.a_o_input_font_icon.find(
                                            o2=>{
                                              return o2.s_name_input == o.s_name_input__controller
                                            }
                                          )

                                          return {
                                            style: "display:flex; flex-direction:row;justify-content:space-between;align-items:center",
                                            a_o: [
                                              {
                                                innerText: o.s_name_action
                                              }, 
                                              {
                                                onclick: ()=>{
                                                  o_state.o_config.o_input_action = o;
                                                  o_state.o_js__a_o_input_mapping?._f_render();
                                                },
                                                s_tag: "button", 
                                              style: "font-size: 3rem;display:flex; flex-direction:row;justify-content:space-between;align-items:center",
                                                a_o: [
                                                  {
                                                    class: 'keyboard_char',
                                                    innerText: (o_state.o_config.o_input_action == o ) ? '?': o.s_name_char_keyboard
                                                  },
                                                  {
                                                    innerHTML: "&nbsp;&nbsp;&nbsp;"
                                                  },
                                                  {
                                                    class: f_s_class__from_s_name_font(v_o_input_font?.s_name_font),
                                                    innerText: (o_state.o_config.o_input_action == o ) ? '?':  v_o_input_font?.s_char
                                                  }
                                                ]
                                              }
                                              // f_o_jsh__keyicons(o.s_name_input)
                                            ]
                                          }
                                        })
                                      ]
                                    }
                                  }
                                }
                              }
                            ).o_js__a_o_input_mapping,
                            {
                              class: 'a_o_input_mapping', 
                              a_o: [
                                
                                  Object.assign(
                                    o_state, 
                                    {
                                      o_js__control_mapping_overlay: {
                                        f_o_jsh:()=>{
                                          return {
                                              a_o: [
                                                {
                                                  innerText: "Press any input to assign it to selected action"
                                                }
                                              ]
                                          }
                                        }
                                      }
                                    }
                                  ).o_js__control_mapping_overlay,
                                ...o_state.o_config.a_o_input_action.map(o=>{
                                  return {
                                    a_o: [
                                      {
                                        innerText: o.s_name_action
                                      }, 
                                      // f_o_jsh__keyicons(o.s_name_input)
                                    ]
                                  }
                                })
                              ]
                            }, 
                            Object.assign(
                              o_state,
                              {
                                  o_js__s_prompt_image_ai_generic: {
                                      f_o_jsh: ()=>{
                                          return {
                                              class: 'hoverable',
                                              a_o:[   
                                                  {
                                                      innerText: "prompt_for_ai"
                                                  }, 
                                                  {
                                                      s_tag: "input", 
                                                      type: 'text', 
                                                      value: o_state.s_prompt_image_ai_generic,
                                                      oninput: (o_e)=>{
                                                          o_state.s_prompt_image_ai_generic = o_e.target.value
                                                      }
                                                  }
                                              ]
                                          }
                                      }
                                  }
                              }
                          
                          ).o_js__s_prompt_image_ai_generic,
                          Object.assign(
                              o_state,
                              {
                                  o_js__s_api_key_openai: {
                                      f_o_jsh: ()=>{
                                          return {
                                              a_o:[   
                                                  {
                                                      innerText: "api_key_openai"
                                                  }, 
                                                  {
                                                      s_tag: "input", 
                                                      type: 'text', 
                                                      oninput: (o_e)=>{
                                                          o_state.s_api_key_openai = o_e.target.value
              
                                                          clearTimeout(o_state.n_id_timeout)
                                                          o_state.n_id_timeout = setTimeout( async ()=>{
                                                              let o = await fetch(
                                                                  "https://api.openai.com/v1/organizations",
                                                                  {
                                                                      headers: {
                                                                          "Authorization": `Bearer ${o_state.s_api_key_openai}`
                                                                      }
                                                                  }    
                                                              );
                                                              let b_invalid = false;
                                                              if(!o.ok){
                                                                  b_invalid = true;
                                                              }
                                                              try {
                                                                  let o_parsed = await o.json();
                                                                  await f_o_throw_notification(o_state.o_state__notifire,`valid api key added`, 'success')
              
                                                              } catch (error) {
                                                                  // f_o_throw_notification('api key invalid')
                                                                  b_invalid = true
                                                              }
                                                              if(b_invalid){
                                                                  await f_o_throw_notification(o_state.o_state__notifire,`invalid api key: ${o_state.s_api_key_openai}!`, 'warning')
                                                              }
              
                                                          },3000)
                                                      }
                                                  }
                                              ]
                                          }
                                      }
                                  }
                              }
                          
                          ).o_js__s_api_key_openai,
                          ...[
                              "n_factor_scale",
                              "n_factor_brightness",
                              "n_factor_contrast",
                              "n_factor_gamma",
                              "n_x_trn_nor",
                              "n_y_trn_nor",
                          ].map(s_prop=>{
                              let s_prop2 = `o_js__${s_prop}`
                              return Object.assign(
                                  o_state,
                                  {
                                      [s_prop2]: {
                                          f_o_jsh:()=>{
                                              return {
                                                  a_o: [
                                                      {
                                                          s_tag: "label", 
                                                          innerText: s_prop
                                                      },
                                                      {
                                                          s_tag: "input",
                                                          type: 'range', 
                                                          step: 0.01, 
                                                          min: -1,
                                                          max:3.,
                                                          value:  o_state[s_prop],
                                                          oninput: (o_e)=>{
                                                              let n = parseFloat(o_e.target.value)
                                                              o_state[s_prop] = n;
                                                          }
                                                      }
                                                  ]
                                              }
                                          }
                                      }
                                  }
                              )[s_prop2]
                          }),
              
                            Object.assign(
                                o_state, 
                                {
                                    o_js__a_o_usb_device: {
                                        f_o_jsh: async  ()=>{
                                          let o2 = await f_o_ws_response({s_name_function: "f_o_command", s_command: 'lsusb'});
                                          o_state.a_o_usb_device = o2.s_stdout.split('\n').filter(s=>s.includes('Device ')).map(s=>{
                                            let [
                                              s_prop_bus,
                                              s_n_val_bus, 
                                              s_prop_device, 
                                              s_n_val_device, 
                                              s_prop_id, 
                                              s_val_vendor_id_product_id, 
                                            ] = s.split(' ');

                                            return {
                                              s_prop_bus,
                                              n_val_bus: parseInt(s_n_val_bus),
                                              s_prop_device,
                                              n_val_device: parseInt(s_n_val_device),
                                              s_prop_id,
                                              n_id_vendor : parseInt(`0x${s_val_vendor_id_product_id.split(":").shift()}`, 16),
                                              n_id_product : parseInt(`0x${s_val_vendor_id_product_id.split(":").pop()}`, 16),
                                              s_val_vendor_id_product_id, 
                                              s_lsusbline: s,
                                              s_name: s.split(' ').slice(6).join(' ')
                                            }
                                          })
                                          let o_usb_device = o_state.a_o_usb_device.find(o=>{
                                            o.n_id_vendor == o_state?.o_config?.n_id_vendor
                                            && o.n_id_product == o_state?.o_config?.n_id_product
                                          }) 
                                          if(o_usb_device){
                                            o_state.o_usb_device = o_usb_device;
                                            o_ws.send(
                                              JSON.stringify({
                                                s_name_function: "f_switch_usb_device", 
                                                n_id_vendor: o_usb_device.n_id_vendor,
                                                n_id_product: o_usb_device.n_id_product,
                                              })
                                            )
                                          }
                                            return {
                                                class: "a_o_usb_device",
                                                s_tag: "select", 
                                                onchange: (o_e)=>{
                                                  let o_usb_device = o_state.a_o_usb_device.find(o2=>{
                                                    return o2.s_val_vendor_id_product_id == o_e.target.value
                                                  });
                                                  if(o_usb_device){
                                                    o_state.o_usb_device = o_usb_device
                                                    // console.log(o_usb_device)
                                                    o_ws.send(
                                                      JSON.stringify({
                                                        s_name_function: "f_switch_usb_device", 
                                                        n_id_vendor: o_usb_device.n_id_vendor,
                                                        n_id_product: o_usb_device.n_id_product,
                                                      })
                                                    )
                                                    o_state.o_config.n_id_vendor = o_usb_device.n_id_vendor
                                                    o_state.o_config.n_id_product = o_usb_device.n_id_product
                                                    let o = f_o_ws_response({
                                                      s_name_function: "f_b_write_s_json_o_config", 
                                                      s_json_o_config: JSON.stringify(o_state.o_config)
                                                    });
                                                  }
                                                },
                                                a_o: [
                                                    ...o_state.a_o_usb_device.map(o=>{
                                                        return {
                                                            s_tag: "option",
                                                            value: o.s_val_vendor_id_product_id, 
                                                            innerText: o.s_name, 
                                                            ...(
                                                              (  
                                                              o_state?.o_config?.n_id_product == o?.n_id_product
                                                              && o_state?.o_config?.n_id_vendor == o?.n_id_vendor
                                                            ) ? {selected: true} : {})
                                                        }
                                                    })
                                                ]
                                            }
                                        }
                                    }
                                }
                            ).o_js__a_o_usb_device,
                          ]
                        }
                      }
                  }
              }
          ).o_js__settings,

          ]
      }
  )
);

// await f_o_throw_notification(o_state.o_state__notifire,'Loading, please wait !', 'warning')
// await f_clear_all_notifications(o_state.o_state__notifire);