import {
  f_s_bordered,
  f_n_idx_ensured_inside_array
} from "https://deno.land/x/handyhelpers@4.0.3/mod.js"

import {
    O_keyboard_key,
    O_input_font_icon,
    O_input_action_mapping,
    O_input_action, 
    O_camera,
    O_video_capability,
    O_resolution
} from "./classes.module.js"

import * as o_mod_autogenerated from './autogenerated.module.js'

window.o_mod_autogenerated = o_mod_autogenerated
import {
  f_s_ymd_hms__from_n_ts_ms_utc
} from "https://deno.land/x/date_functions@1.4/mod.js"

import {
  f_add_css,
  f_s_css_prefixed,
  o_variables, 
  f_s_css_from_o_variables, 
  f_s_hsla
} from "https://deno.land/x/f_add_css@1.2/mod.js"

import {
  O_vec4
}from "https://deno.land/x/vector@1.4/mod.js"

import {
  f_o_html__and_make_renderable,
}from 'https://deno.land/x/f_o_html_from_o_js@3.4/mod.js'

import {
    f_o_js as f_o_js__notifire, 
    f_o_throw_notification as f_o_throw_notification__original,
    f_clear_all_notifications,
    f_clear_o_notification
}from "https://deno.land/x/f_o_html_from_o_js@3.4/localhost/jsh_modules/notifire/mod.js"

import {
  f_n_idx_binding_from_params,
  f_o_gpu_gateway, 
  f_o_gpu_gateway__from_simple_fragment_shader,
  f_o_gpu_gateway_webgpu,
  f_o_gpu_gateway_webgpu_dataitem__buffer_from_v_as_type,
  f_o_gpu_texture__from_o_web_api_object,
  f_render_o_gpu_gateway,
  f_render_o_gpu_gateway_webgpu,
  f_s_autogenerated_accessor_functions,
  f_s_binding_declaration__from_o_gpu_gateway_webgpu,
  f_update_data_in_o_gpu_gateway,
  f_update_data_in_o_gpu_gateway_webgpu,
}
from 'https://deno.land/x/gpugateway@0.5/mod.js'

import {
  O_microscope_brand,
  O_microscope_objective,
  O_microscope,
  O_image,
  O_image_description,
  O_vec2,
  O_spacial_information_nor,
  O_image_object,
  O_image_description_o_image_object, 
  s_name_ws_action__hello,
  s_name_ws_action__f_save_screenshot,
  s_name_ws_action__f_add_image_to_focus_stack,
  s_name_ws_action__f_create_focus_stack,
  s_name_ws_action__f_add_iamge_to_image_stitch,
  s_name_ws_action__f_update_image_stitching_result,
  s_name_ws_action__f_s_read_text_file,
  s_name_ws_action__f_b_write_s_text_file,
  s_name_ws_action__f_o_command,
  s_name_ws_action__f_control_stepper_motor,
  s_name_ws_action__f_switch_usb_device
} from "./autogenerated.module.js"

let a_s_image_mode = [
  'rgba_normal',
  'rgba_inverted',
  'red_channel_only',
  'green_channel_only', 
  'blue_channel_only', 
  'edge_detection', 
  'sharpen', 
  'gaussian_blur',
  'emboss', 
  'outline_edge'
]

let s_name_font_Controller_Font___Atari_2600 = 'Controller Font: Atari 2600'
let s_name_font_Controller_Font___Microsoft_Xbox_One = 'Controller Font: Microsoft Xbox One'
let s_name_font_Controller_Font___Nintendo_Game_Boy = 'Controller Font: Nintendo Game Boy'
let s_name_font_Controller_Font___Nintendo_GBA = 'Controller Font: Nintendo GBA'
let s_name_font_Controller_Font___Nintendo_NES = 'Controller Font: Nintendo NES'
let s_name_font_Controller_Font___Nintendo_SNES = 'Controller Font: Nintendo SNES'
// i have modified this font and added analog stick x and y axis arrows so <O>, for both L and R analog stick
let s_name_font_Controller_Font___Nintendo_Switch_modified = 'Controller Font: Nintendo Switch modified'
let s_name_font_Controller_Font___Sony_PlayStation_4 = 'Controller Font: Sony PlayStation 4'

let a_s_name_font = [
  s_name_font_Controller_Font___Atari_2600,
  s_name_font_Controller_Font___Microsoft_Xbox_One,
  s_name_font_Controller_Font___Nintendo_Game_Boy,
  s_name_font_Controller_Font___Nintendo_GBA,
  s_name_font_Controller_Font___Nintendo_NES,
  s_name_font_Controller_Font___Nintendo_SNES,
  s_name_font_Controller_Font___Nintendo_Switch_modified,
  s_name_font_Controller_Font___Sony_PlayStation_4,
]


let o_s_name_class = {
  O_microscope_brand,
  O_microscope_objective,
  O_microscope,
  O_image,
  O_image_description,
  O_vec2,
  O_spacial_information_nor,
  O_image_object,
  O_image_description_o_image_object,
}
let o_state = {
  o_state__notifire: {}
};
window.o_state = o_state
document.body.appendChild(
  //making throwing notifications possible instantly
  await f_o_html__and_make_renderable(
      {
        a_o: [
          f_o_js__notifire( 
            o_state.o_state__notifire
          ),
        ]
      }
    )
)



let f_o_ws_response = async function(
  o_request_data
){
  return new Promise((f_res)=>{

    let s_uuid = crypto.randomUUID();

    let f_socket_handler = (o_e)=>{
      let v_o = null;
      try {
        v_o = JSON.parse(o_e.data);
      } catch (error) {
      }
      if(v_o?.s_uuid == s_uuid){
        o_ws.removeEventListener("message", f_socket_handler)
        return f_res(v_o);
      }
    }
  
    o_ws.addEventListener("message", f_socket_handler);

    // console.log({s_uuid})
    o_ws.send(
      JSON.stringify({
        s_uuid: s_uuid, 
        ...o_request_data
      })
    );
  })
}



let f_o_ws = async function(){
  return new Promise(
    (f_res)=>{

        // Replace 'ws://example.com/socket' with the URL of your WebSocket server
        const o_ws = new WebSocket(`ws${(location.protocol == 'https:')?"s":''}://${location.hostname}:${location.port}/ws`);
        // Connection opened
        o_ws.addEventListener('open', async function (event) {
            return f_res(o_ws);
        });
        
    }
  )
}

let f_o_throw_notification = async function(){
  let s_bordered = f_s_bordered(
    [
      new Date().toISOString(),
      `f_o_throw_notification called: ${arguments[1]} ('${arguments?.[2]}')`
    ]
    );
  console.log(s_bordered)
  // console.log(...arguments)
  return f_o_throw_notification__original(...arguments)
}

let o_notification_tmp = null;
o_notification_tmp = await f_o_throw_notification(o_state.o_state__notifire,`Opening server connection (websocket)...`, 'loading')
let o_ws = await f_o_ws();
console.log(o_ws);
await f_clear_o_notification(o_notification_tmp)
o_notification_tmp = await f_o_throw_notification(o_state.o_state__notifire,`Websocket is open`, 'info')
await f_clear_o_notification(o_notification_tmp)

let s_git_commit = (await f_o_ws_response({s_name_function: s_name_ws_action__f_o_command, s_command: 'git log -1 --pretty=%H'})).s_stdout.trim();
let s_name_file_config = `o_config_${s_git_commit}.json`;

let f_ensure_default_data = async function(){

  let n_ts_ms_ut__created = Date.now();
  let o_microscope_brand__GenericBrand =  new O_microscope_brand(1, 'GenericBrand', n_ts_ms_ut__created, n_ts_ms_ut__created)
  let o_microscope_brand__Olympus =  new O_microscope_brand(2, 'Olympus', n_ts_ms_ut__created, n_ts_ms_ut__created)
  let o_microscope_brand__Bresser =  new O_microscope_brand(3, 'Bresser', n_ts_ms_ut__created, n_ts_ms_ut__created)
  let o_microscope_brand__Nikon =  new O_microscope_brand(4, 'Nikon', n_ts_ms_ut__created, n_ts_ms_ut__created)
  let o_microscope_brand__Zeiss =  new O_microscope_brand(5, 'Zeiss', n_ts_ms_ut__created, n_ts_ms_ut__created)
  let o_microscope_brand__Leica =  new O_microscope_brand(6, 'Leica', n_ts_ms_ut__created, n_ts_ms_ut__created)

// Create default objectives
let o_microscope_objective__4x = new O_microscope_objective(1, '4x Objective', 4, 0.10, 1, 17, 4.5, false, '160mm', n_ts_ms_ut__created, n_ts_ms_ut__created);
let o_microscope_objective__10x = new O_microscope_objective(2, '10x Objective', 10, 0.25, 1, 16, 2.0, false, '160mm', n_ts_ms_ut__created, n_ts_ms_ut__created);
let o_microscope_objective__20x = new O_microscope_objective(3, '20x Objective', 20, 0.40, 1, 15, 1.0, true, '160mm', n_ts_ms_ut__created, n_ts_ms_ut__created);
let o_microscope_objective__40x = new O_microscope_objective(4, '40x Objective', 40, 0.65, 1, 14, 0.5, true, '160mm', n_ts_ms_ut__created, n_ts_ms_ut__created);

// Create sample microscopes
let o_microscope__GenericModel = new O_microscope(1, 'ModelX', o_microscope_brand__GenericBrand.n_u32_id, n_ts_ms_ut__created);

  // Create a sample microscope
  let o_s_name_array_a_o = {
    'a_o_microscope_brand': [
      o_microscope_brand__GenericBrand,
      o_microscope_brand__Olympus,
      o_microscope_brand__Bresser,
      o_microscope_brand__Nikon,
      o_microscope_brand__Zeiss,
      o_microscope_brand__Leica,
    ], 
    'a_o_microscope_objective': [
      o_microscope_objective__4x,
      o_microscope_objective__10x,
      o_microscope_objective__20x,
      o_microscope_objective__40x,
    ], 
    'a_o_microscope': [
      o_microscope__GenericModel
    ]
  }
  for(let s_name_array in o_s_name_array_a_o){
    let b_update = false;
    for(let o of o_s_name_array_a_o[s_name_array]){

      let a_s = Object.keys(o).filter(s=>{
        return ['n_u64_ts_ms_ut__created', `n_u64_ts_ms_ut__updated`].includes(s) == false
      });
      let o_existing = o_state?.[s_name_array]?.find((o2)=>{
          for(let s of a_s){
            console.log(o[s] , o2[s])
            if(o[s] != o2[s]){
              return false
            }
          }
          return true
      })

      if(!o_existing){
        o_state?.[s_name_array]?.push(o);
        b_update = true;
      }
    }
    if(b_update){
      let o = await f_o_ws_response({
        s_name_function: s_name_ws_action__f_b_write_s_text_file,
        s_path_rel: `${s_name_array}.json`,
        s_text: JSON.stringify(o_state[s_name_array])
      });
      
    }
  }
  const o_microscope__generic = new O_microscope(1, 'generic_model', o_microscope_brand__Bresser.n_u32_id, n_ts_ms_ut__created);

}


let s_ymd_hms__js_start = f_s_ymd_hms__from_n_ts_ms_utc(new Date().getTime());
Object.assign(
 o_state,
 {
  o_user_media_stream: null, 
  o_video_track: null,
 b_display_info_tmp_text: false,
 b_display_info_tmp_text__last: false,
 s_overlay_info_tmp_text: "temporarily shown on the overlay hides after n_ms after an input",
 n_ms_delta_max_info_tmp_text: 1200,
 a_o_input_action: o_mod_autogenerated.a_o_input_action,
 a_o_video_capabilities: [],
 s_url_image_stitch_result: '',
 n_wpn_last_input: performance.now(), 
 n_ms_delta_max_display_image_mode: 1200,
 a_s_url_screenshot: [],
 a_s_data_url__for_stacking: [],
 s_name_file_template: '${s_ymd_hms}',
 s_name_file_template_focus_stack_result: '${s_ymd_hms}_focus_stacked',
 b_development: true,
 b_webcam_available: false,
 o_cursor_virtual: {
   o_trn: {
     n_x: 0,
     n_y: 0
   }
 },
 ...(await Object.assign(
   {}, 
   ...(await Promise.all(
     [
       "O_microscope_brand",
       "O_microscope_objective",
       "O_microscope",
       "O_image",
       "O_image_description",
       "O_vec2",
       "O_spacial_information_nor",
       "O_image_object",
       "O_image_description_o_image_object",
     ].map(async s=>{
 
       let s_name_array = `a_${s.toLowerCase()}` 
       let o = await f_o_ws_response({
         s_name_function: s_name_ws_action__f_s_read_text_file,
         s_path_rel: `${s_name_array}.json`
       });
       let a_o = []
       try {
         a_o = JSON.parse(
           o?.s_text
         );
       } catch (error) {
       }
       return {
         [s_name_array]: a_o,
         [s.toLowerCase()]: {}
       }
     }),
   ))

 )),
 // "left_meta1_button": '(',//nintendo nes font ('select') 
 // "right_meta1_button": ')',//nintendo nes font ('start') 
 a_o_keyboard_key: [],
 o_input_action_mapping__next_action_layer: null,
 o_input_action_mapping__prev_action_layer: null,
 v_o_input_sensor__o_input_action_mapping__next_action_layer__last: null,
 v_o_input_sensor__o_input_action_mapping__next_action_layer: null,
 v_o_input_sensor__o_input_action_mapping__prev_action_layer__last: null,
 v_o_input_sensor__o_input_action_mapping__prev_action_layer: null,
 v_o_keyboard_key__o_input_action_mapping__prev_action_layer: null,
 v_o_keyboard_key__o_input_action_mapping__next_action_layer: null,
 o_input_action_mapping__keep_hold_down_toggle_layer2: null,
 o_input_action_mapping__keep_hold_down_toggle_layer3: null,
 v_o_input_sensor__o_input_action_mapping__keep_hold_down_toggle_layer2__last: null,
 v_o_input_sensor__o_input_action_mapping__keep_hold_down_toggle_layer2: null,
 v_o_input_sensor__o_input_action_mapping__keep_hold_down_toggle_layer3__last: null,
 v_o_input_sensor__o_input_action_mapping__keep_hold_down_toggle_layer3: null,
 v_o_keyboard_key__o_input_action_mapping__keep_hold_down_toggle_layer2: null,
 v_o_keyboard_key__o_input_action_mapping__keep_hold_down_toggle_layer3: null,


 a_o_input_font_icon: [
   new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__face_button_bottom, 
     'x',
     s_name_font_Controller_Font___Sony_PlayStation_4
   ),
   new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__face_button_right,
     'c',
     s_name_font_Controller_Font___Sony_PlayStation_4
   ),
   new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__face_button_top,
     't',
     s_name_font_Controller_Font___Sony_PlayStation_4
   ),
   new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__face_button_left,
     's',
     s_name_font_Controller_Font___Sony_PlayStation_4
   ),
   new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__right_index_finger_button_r1,
     ']',
     s_name_font_Controller_Font___Sony_PlayStation_4
   ),
   new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__right_middle_finger_button_r2,
     '}',
     s_name_font_Controller_Font___Sony_PlayStation_4
   ),
   new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__left_index_finger_button_l1,
     '[',
     s_name_font_Controller_Font___Sony_PlayStation_4
   ),
   new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__left_middle_finger_button_l2,
     '{',
     s_name_font_Controller_Font___Sony_PlayStation_4
   ),
   new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__left_stick_button_l3,
     '<',
     s_name_font_Controller_Font___Nintendo_Switch_modified
   ),
   new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__right_stick_button_r3,
     '>',
     s_name_font_Controller_Font___Nintendo_Switch_modified
   ),
   new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__left_stick_x_axis,
     'I',
     s_name_font_Controller_Font___Nintendo_Switch_modified
   ),
   new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__left_stick_y_axis,
     'J',
     s_name_font_Controller_Font___Nintendo_Switch_modified
   ),
   new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__right_stick_x_axis,
     'K',
     s_name_font_Controller_Font___Nintendo_Switch_modified
   ),
   new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__right_stick_y_axis,
     'L',
     s_name_font_Controller_Font___Nintendo_Switch_modified
   ),
   new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__left_meta1_button,
     '{',
     s_name_font_Controller_Font___Nintendo_GBA
   ),
   new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__center_meta1_button,
     'h',
     s_name_font_Controller_Font___Nintendo_Switch_modified,
   )
   , new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__right_meta1_button,
     '}',
     s_name_font_Controller_Font___Nintendo_GBA
   ),
   new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__direction_pad_up,
     'W',
     s_name_font_Controller_Font___Sony_PlayStation_4
   ),
   new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__direction_pad_down,
     'X',
     s_name_font_Controller_Font___Sony_PlayStation_4
   ),
   new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__direction_pad_right,
     'D',
     s_name_font_Controller_Font___Sony_PlayStation_4
   ),
   new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__direction_pad_left,
     'A',
     s_name_font_Controller_Font___Sony_PlayStation_4
   ),
   new O_input_font_icon(
     o_mod_autogenerated.s_name_o_input_sensor__direction_pad_values,
     '',
     s_name_font_Controller_Font___Sony_PlayStation_4
   ),
 ],
 o_config__default: {
   a_o_camera: [],
   s_git_commit, 
   n_idx_a_o_camera: 0, 
   n_idx_a_s_image_mode:0,
   a_s_image_mode: a_s_image_mode,
   n_ms_config_auto_background_save_interval: 3 * 1000,
   n_factor_scale: 1., 
   n_factor_brightness: 1., 
   n_factor_contrast: 1.,
   n_factor_gamma: 1.0,// i assume the js webcam capturing api already does gamma correction
   n_x_trn_nor: 0.0,
   n_y_trn_nor: 0.0,
   s_path_rel_images: `./media/images_${s_ymd_hms__js_start.split(" ").join("_")}`,
   s_path_rel_videos: `./media/videos_${s_ymd_hms__js_start.split(" ").join("_")}`,
   s_path_rel_stacking: `./media/tmp_focus_stacking_images`,
   s_path_rel_stitching: `./media/tmp_image_stitching_images`,
   s_path_rel_archive: `./media/archive`,
   b_layer_switch_type_on_click_cycle_through: false,
   b_layer_switch_keep_pressed_required: true,
   n_idx_a_o_action_layer: 0,
   n_idx_a_o_action_layer__last: 0,
   v_o_action_layer: null, 
   a_o_input_action_mapping__layer_switch: [
     new O_input_action_mapping(
       o_mod_autogenerated.o_input_action__keep_hold_down_toggle_layer2,
       o_mod_autogenerated.s_name_o_input_sensor__left_middle_finger_button_l2, 
       '1',
     ),
     new O_input_action_mapping(
       o_mod_autogenerated.o_input_action__keep_hold_down_toggle_layer3,
       o_mod_autogenerated.s_name_o_input_sensor__left_index_finger_button_l1, 
       '2',
     ),
     new O_input_action_mapping(
       o_mod_autogenerated.o_input_action__next_action_layer,
       o_mod_autogenerated.s_name_o_input_sensor__left_index_finger_button_l1, 
       '1',
     ),
     new O_input_action_mapping(
       o_mod_autogenerated.o_input_action__prev_action_layer,
       o_mod_autogenerated.s_name_o_input_sensor__right_index_finger_button_r1, 
       '2',
     ),
   ],
   a_o_action_layer: [
     {
       v_o_input_action: null,
       s_name: 'microscope control',
       a_o_input_action_mapping: [
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__move_slide_x_plus,
           o_mod_autogenerated.s_name_o_input_sensor__right_stick_x_axis, 
           'l',
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__move_slide_x_minus,
           o_mod_autogenerated.s_name_o_input_sensor__right_stick_x_axis, 
            'j', 
            false,
          ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__move_slide_y_plus,
           o_mod_autogenerated.s_name_o_input_sensor__right_stick_y_axis, 
           'i', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__move_slide_y_minus,
           o_mod_autogenerated.s_name_o_input_sensor__right_stick_y_axis, 
            'k', 
            false,
          ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__move_focus_plus,
           o_mod_autogenerated.s_name_o_input_sensor__left_stick_y_axis, 
           'o', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__move_focus_minus,
           o_mod_autogenerated.s_name_o_input_sensor__left_stick_y_axis, 
            'u',
            false,
          ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__move_slide_single_step_x_plus, 
           o_mod_autogenerated.s_name_o_input_sensor__direction_pad_right,
           'l', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__move_slide_single_step_x_minus, 
          o_mod_autogenerated.s_name_o_input_sensor__direction_pad_left, 
          'h', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__move_slide_single_step_y_plus, 
          o_mod_autogenerated.s_name_o_input_sensor__direction_pad_up, 
          'i', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__move_slide_single_step_y_minus, 
          o_mod_autogenerated.s_name_o_input_sensor__direction_pad_down, 
          'k', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__reset_image_manipulation, 
          o_mod_autogenerated.s_name_o_input_sensor__left_meta1_button, 
          'r', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__toggle_settings, 
          o_mod_autogenerated.s_name_o_input_sensor__center_meta1_button, 
          'Escape', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__take_screenshot, 
          o_mod_autogenerated.s_name_o_input_sensor__face_button_bottom, 
          '7', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__toggle_record_video, 
          o_mod_autogenerated.s_name_o_input_sensor__face_button_right, 
          '8', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__ask_ai, 
          o_mod_autogenerated.s_name_o_input_sensor__face_button_top, 
          '9', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__add_image_to_focus_stack, 
          o_mod_autogenerated.s_name_o_input_sensor__face_button_left, 
          '0', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__finish_focus_stack, 
          o_mod_autogenerated.s_name_o_input_sensor__right_meta1_button, 
          '-', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__add_image_to_image_stitch, 
          o_mod_autogenerated.s_name_o_input_sensor__right_stick_button_r3, 
          '=', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__clear_image_stitch, 
          o_mod_autogenerated.s_name_o_input_sensor__left_stick_button_l3, 
          ']', 
           false,
         ),
         
         

       ]
     }, 
     {
       v_o_input_action: null,
       s_name: 'image control',
       a_o_input_action_mapping: [
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__move_digital_x_plus,
           o_mod_autogenerated.s_name_o_input_sensor__right_stick_x_axis, 
           'l',
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__move_digital_x_minus,
           o_mod_autogenerated.s_name_o_input_sensor__right_stick_x_axis, 
            'j', 
            false,
          ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__move_digital_y_plus,
           o_mod_autogenerated.s_name_o_input_sensor__right_stick_y_axis, 
           'i', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__move_digital_y_minus,
           o_mod_autogenerated.s_name_o_input_sensor__right_stick_y_axis, 
            'k', 
            false,
          ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__zoom_digital_plus,
           o_mod_autogenerated.s_name_o_input_sensor__left_stick_y_axis, 
           'o', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__zoom_digital_minus,
           o_mod_autogenerated.s_name_o_input_sensor__left_stick_y_axis, 
            'u',
            false,
          ),
          new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__image_brightness_plus, 
           o_mod_autogenerated.s_name_o_input_sensor__direction_pad_right,
           'd', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__image_brightness_minus, 
          o_mod_autogenerated.s_name_o_input_sensor__direction_pad_left, 
          'a', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__image_contrast_plus, 
          o_mod_autogenerated.s_name_o_input_sensor__direction_pad_up, 
          'w', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__image_contrast_minus, 
          o_mod_autogenerated.s_name_o_input_sensor__direction_pad_down, 
          's', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__image_gamma_plus, 
          o_mod_autogenerated.s_name_o_input_sensor__left_meta1_button, 
          'q', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__image_gamma_minus, 
          o_mod_autogenerated.s_name_o_input_sensor__center_meta1_button, 
          'e',
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__reset_image_manipulation, 
          o_mod_autogenerated.s_name_o_input_sensor__left_meta1_button, 
          'r', 
           false,
         ),
         new O_input_action_mapping(
           o_mod_autogenerated.o_input_action__next_image_mode, 
          o_mod_autogenerated.s_name_o_input_sensor__right_index_finger_button_r1, 
          'y', 
           false,
         ),

       ]
     },
     {
       v_o_input_action: null,
       s_name: 'cursor  control',
       a_o_input_action_mapping: []
     }
   ],
   o_input_action: null,
   // a_o_input_action: [

   //   new O_input_action(
   //     'keep_hold_down_toggle_camera_control', 
   //     'left_index_finger_button_l1', 
   //     '',
   //     false,
   //   ),
   //   new O_input_action(
   //     'keep_hold_down_toggle_image_control', 
   //     'left_middle_finger_button_l2', 
   //     '',
   //     false,
   //   ),
   //   new O_input_action(
   //     'toggle_settings', 
   //     'right_meta1_button', 
   //     'escape',
   //     false,
   //   ),

   //   new O_input_action(
   //     'next_image_mode', 
   //     'right_index_finger_button_r1', 
   //     'x',
   //     false,
   //   ),
   //   new O_input_action(
   //     'previous_image_mode', 
   //     'left_index_finger_button_l1', 
   //     'z',
   //     false,
   //   ),

   //   new O_input_action(
   //    'reset_image_manipulation', 
   //     'left_meta1_button', 
   //     'r',
   //     false,
   //   ),
   //   new O_input_action(
   //     'move_digital_x_plus', 
   //     'right_stick_x_axis', 
   //     'd',
   //     false,
   //   ),
   //   new O_input_action(
   //     'move_digital_x_minus', 
   //     'right_stick_x_axis', 
   //     'a',
   //     false,
   //   ),

   //   new O_input_action(
   //     'move_digital_y_plus', 
   //     'right_stick_y_axis', 
   //     'w',
   //     false,
   //   ),
   //   new O_input_action(
   //     'move_digital_y_minus', 
   //     'right_stick_y_axis', 
   //     's',
   //     false,
   //   ),
   //   new O_input_action(
   //     'zoom_digital_plus', 
   //     'left_stick_y_axis', 
   //     'e',
   //     false,
   //   ),
   //   new O_input_action(
   //     'zoom_digital_minus', 
   //     'left_stick_y_axis', 
   //     'q',
   //     false,
   //   ),


   // ]
 },
 o_config: null,
 
 n_fps: 24,
 b_render__settings: false,
 v_o_input_device: null,
 n_id_timeout: null,
 a_o_usb_device: [], 
 o_usb_device: null, 
 o_trn_nor_mouse_last: [.5,.5],
 o_trn_nor_mouse: [.5,.5], 
 o_trn_nor_mouse_follow: [0.,0.], 

 a_o_webcam: [],
 s_api_key_openai: 'sk-....', 
 s_prompt_image_ai: `
 return information about this image
 , the image is taken with a camera that is connected to a microscope give the response as a json object with the following structure, the prefixes indicate the types (n_... number) (s_... string) (o_... object) (a_[prefix]... array , eg. a_o_... arrray of objects, a_s_... array of strings ) 'n_micrometer_x_axis_approx': the approximate size of the image on the full x axis try to guess based on what you see on this 'a_o_object' (array of objects) an array holding objects , each object represents an object that is seen on the image (if there are multiple same for example bloodcells, only the best visible should be listed here otherwise hundrets of object would need to be listed in the example of bloodcells...), where the json structure of a "o_object" looks like this 's_name' (string) a short string describing the object 'n_x_nor' a normalized number describing the position on the x axis where 1.0 is fully on the right and 0.0 is fully on the left of the image 'n_y_nor' same like n_x_nor for the y axis, 0.0 is fully on the bottom, 1.0 is fully on the top 'n_micrometer_diameter_approx' approximation of the diameter of the circle bounding the object

 's_description' a general description of what can be seen on the image `,
 s_prompt_image_ai_generic: `
 return information about this image,
 
 return the response as a json object that has the following structure, the prefixes indicate the types (n_... number) (s_... string) (o_... object) (a_[prefix]... array , eg. a_o_... arrray of objects, a_s_... array of strings ) 'n_micrometer_x_axis_approx': the approximate size of the image on the full x axis try to guess based on what you see on this 'a_o_object' (array of objects) an array holding objects , each object represents an object that is seen on the image (if there are multiple same for example bloodcells, only the best visible should be listed here otherwise hundrets of object would need to be listed in the example of bloodcells...), where the json structure of a "o_object" looks like this 's_name' (string) a short string describing the object 'n_x_nor' a normalized number describing the position on the x axis where 1.0 is fully on the right and 0.0 is fully on the left of the image 'n_y_nor' same like n_x_nor for the y axis, 0.0 is fully on the bottom, 1.0 is fully on the top 'n_micrometer_diameter_approx' approximation of the diameter of the circle bounding the object

 's_description' a general description of what can be seen on the image `
})
o_state.o_config = o_state.o_config__default

// await f_ensure_default_data();
console.log("def data inited.");

// let o = await f_o_ws_response({s_name_function: "hello"});

  //r_ser_w_cli // read server , write client
  let o = await f_o_ws_response({
    s_name_function: s_name_ws_action__f_s_read_text_file,
    s_path_rel: s_name_file_config
  });

  let o_config = o_state.o_config__default;
  try{
    o_config = JSON.parse(o.s_text)
  }catch{
    await f_o_throw_notification(
      o_state.o_state__notifire,
      'There was no configuration file for the current version of the program. A new file will be created...',
      'info'
    )
    let o2 = await f_o_ws_response({
      s_name_function: s_name_ws_action__f_b_write_s_text_file, 
      s_path_rel: s_name_file_config,
      s_text: JSON.stringify(o_config, null, 4)
    });
    // console.log("cannot parse config")
  }

  if(!o_state.b_development){
    o_state.o_config = o_config;
  }else{
    o_state.o_config = o_state.o_config__default;
  }

  o_state?.o_js__a_o_usb_device?._f_render?.()

  [
    "O_microscope_brand",
    "O_microscope_objective",
    "O_microscope"
  ].forEach(s_name_model=>{
    f_update_o_from_n_u32_id(s_name_model, o_state?.[`n_u32_id__${s_name_model}`])
  })

  if(o_state.o_config.n_id_product && o_state.o_config.n_id_vendor){
    o_ws.send(
      JSON.stringify({
        s_name_function: s_name_ws_action__f_switch_usb_device, 
        n_id_vendor: o_state.o_config.n_id_vendor,
        n_id_product: o_state.o_config.n_id_product,
      })
    )
  }





let f_s_class__from_s_name_font = function(s){
  return s?.replaceAll(":", '-')?.replaceAll(" ", "_");
}
let f_s_path_font_from_s_name_font = function(s){
  return `'./fonts/${s.replaceAll(':', '_-').replaceAll(" ", "_")}/${s.replaceAll('Controller Font: ', 'Controller - ')}.otf'`
  
}



let f_update_input_mapping_references = function(){
  o_state.o_input_action_mapping__next_action_layer = o_state.o_config.a_o_input_action_mapping__layer_switch.find(o=>
    o.o_input_action.s_name==o_mod_autogenerated.o_input_action__next_action_layer.s_name
  )
  o_state.o_input_action_mapping__prev_action_layer = o_state.o_config.a_o_input_action_mapping__layer_switch.find(o=>
    o.o_input_action.s_name==o_mod_autogenerated.o_input_action__prev_action_layer.s_name
  )
  o_state.v_o_input_sensor__o_input_action_mapping__next_action_layer = o_state?.v_o_input_device?.a_o_input_sensor?.find(
    o => o.s_name == o_state.o_input_action_mapping__next_action_layer?.s_name_input__controller 
  )
  o_state.v_o_input_sensor__o_input_action_mapping__prev_action_layer = o_state?.v_o_input_device?.a_o_input_sensor?.find(
    o=>o.s_name == o_state.o_input_action_mapping__prev_action_layer?.s_name_input__controller
  );

  o_state.o_input_action_mapping__keep_hold_down_toggle_layer2 = o_state.o_config.a_o_input_action_mapping__layer_switch.find(o=>
    o.o_input_action.s_name==o_mod_autogenerated.o_input_action__keep_hold_down_toggle_layer2.s_name
  )
  o_state.o_input_action_mapping__keep_hold_down_toggle_layer3 = o_state.o_config.a_o_input_action_mapping__layer_switch.find(o=>
    o.o_input_action.s_name==o_mod_autogenerated.o_input_action__keep_hold_down_toggle_layer3.s_name
  )
  o_state.v_o_input_sensor__o_input_action_mapping__keep_hold_down_toggle_layer2 = o_state?.v_o_input_device?.a_o_input_sensor?.find(
    o=>o.s_name == o_state.o_input_action_mapping__keep_hold_down_toggle_layer2?.s_name_input__controller

  )
  o_state.v_o_input_sensor__o_input_action_mapping__keep_hold_down_toggle_layer3 = o_state?.v_o_input_device?.a_o_input_sensor?.find(
    o=>o.s_name == o_state.o_input_action_mapping__keep_hold_down_toggle_layer3?.s_name_input__controller
  );
 
}
let f_keydown_or_keyup = function(o_e, b_down){

  let v_o = o_state.a_o_keyboard_key.find(o=>o.s_name == o_e.key);
  if(!v_o){
    v_o = new O_keyboard_key(
      o_e.key, 
      0, 
      0, 
      0, 
      false, 
      false,
    )
    o_state.a_o_keyboard_key.push(v_o)
  }
  v_o.b_down__last = v_o.b_down
  let n_ms_wpn = window.performance.now();
  v_o[`n_ms_wpn_${(b_down) ? "down": "up"}`] = n_ms_wpn;
  v_o.n_ms_wpn__last_down_or_up = window.performance.now();
  v_o.b_down = b_down


  // console.log(b_down)
}
window.addEventListener('keydown', (o_e)=>{ f_keydown_or_keyup(o_e, true)})
window.addEventListener('keyup', (o_e)=>{ f_keydown_or_keyup(o_e, false)})

window.addEventListener('mousemove', (o_e)=>{ 

  o_state.o_cursor_virtual.o_trn.n_x = o_e.clientX;
  o_state.o_cursor_virtual.o_trn.n_y = o_e.clientY;
  // o_state?.o_js__o_cursor_virtual._f_render();
  // console.log(o_e.target)
  Array.from(document.querySelectorAll('.hoverable')).map(o=>{
    o.classList.remove("hovered")
    return o
  });
  o_e.target.classList.add("hovered");

})

o_variables.o_hsla__fg_hover = new O_vec4(
  0.2, 
  0.3, 
  0.8, 
  0.9
);
o_variables.n_rem_font_size_base = 1.15 // adjust font size, other variables can also be adapted before adding the css to the dom
o_variables.n_rem_padding_interactive_elements = 0.5; // adjust padding for interactive elements 
window.o_variables = o_variables
o_variables.n_rem_padding_interactive_elements = 0.2;
f_add_css(
  `
  ${a_s_name_font.map(s=>{
    return `
      @font-face {
        font-family: '${s}';
        src: url(${f_s_path_font_from_s_name_font(s)}) format('opentype');
      }
      .${f_s_class__from_s_name_font(s)}{
        font-family: '${s}';
      }
    `
  }).join('\n')}



  .info_tmp_text{
    background-color: rgba(33,33,33,0.9) !important;
    padding: 1rem;
    font-size: .5rem;
    display:flex;
    align-content:end;
    justify-content:end;
    align-items:end;
    flex-direction:row;
    text-align: right;
    width:auto;
    flex-shrink:1;
    flex-grow:1;
    width: auto;
  }
  .a_o{
    display:flex;
    flex-direction:column;
  }
  .o{
    margin-bottom: 1rem;
  }
  .o:nth-child(odd) {
    background: rgba(0,0,0,0.1);
  }
  .overlay{
    position:fixed;
    width: 100vw;
    height: 100vh;
    left:0;
    top:0;
    z-index:1;
  }
  ${
    ``
  //   `  .hoverable {
  //     display: flex;
  //     align-items: center;
  //     justify-content: space-between;
  //     /* border: 1px solid ${f_s_hsla(o_variables.o_hsla__fg)}; */
  //     padding: 0.5rem;
  // }
  // .hoverable.hovered, 
  // .hoverable:hover{
  //   color: ${f_s_hsla(o_variables.o_hsla__fg_hover)};
  //   /*border: 1px solid ${f_s_hsla(o_variables.o_hsla__fg_hover)}; */
  //   background: ${f_s_hsla(o_variables.o_hsla__bg_hover)};
  // }`
  }


  body{
      min-height: 100vh;
      min-width: 100vw;
      /* background: rgba(0,0,0,0.84);*/
      display:flex;
      justify-content:center;
  }
  .canvas_container {
      position: fixed;
      width: 100vw;
      height: 100vh;
      z-index:-1;
  }
  canvas{
    width: 100%;
    height: 100%;
    object-fit: contain;
  }
  .app{
      max-width: 1000px;
      width:100%;
      height: 100vh;
      display:flex;
      flex-direction: column;
      justify-content:flex-end;
  }
  video{
    display:none;
  }
  .gamepad_controls {
      
      width: 100%; 
      height: 100%; 
      aspect-ratio:2/1;
      position:relative;
      background: rgba(22,22,22,0.8);
  }
  [class^="Controller"] {
    /* Your styles here */
    font-size: 3.3em;
    margin: 0 0 0 10px;
  }
  .weak_contrast_font{
    color: rgba(133, 132, 132, 1);
  }
  .keyboard_char {
    margin: 0 0 0 10px;
    padding: 0.5em;
    min-width: 1em;
    min-height: 1em;
    aspect-ratio: 1/1;
    border: 1px solid ${f_s_hsla(o_variables.o_hsla__fg)};
    border-radius: 10px;
    display: flex;
    align-items: top;
    justify-content: center;
    box-shadow: 4px 2px 0px ${f_s_hsla(o_variables.o_hsla__bg_hover)};
    display: flex;
    align-items: center;
  }
  .gamepad_controls .layer{
    left: 50%;
    top: 5%;
    position:absolute;
    transform:translate(-50%, -50%)
  }
  .gamepad_controls .svg {
      position:absolute;
      top:50%;
      left:50%;
      width:100%;
      transform: translate(-50%, -50%);
      height: auto; 
  }
  .gamepad_controls .svg path{
    stroke: rgba(222,222,222,0.7);
    stroke-width: 0.3px;
  }
  .line2 {
    height: 50px;
    border-left: 3px solid rgba(222,222,222,0.8);
    position: absolute;
    top: -50px;
    left: 0;
}
.action_layer {
  background: rgba(22,22,22,0.8);
  max-width:300px;
  font-size:0.5rem;
  position:absolute;
  right:0;
}
/* Apply styles to all scrollable elements */
::-webkit-scrollbar {
    width: 12px; /* Width of the scrollbar */
}

::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.1); /* Semi-transparent black track */
    border-radius: 10px; /* Rounded edges on the track */
}

::-webkit-scrollbar-thumb {
    background: rgba(192, 192, 192, 0.5); /* Semi-transparent silver thumb */
    border-radius: 10px; /* Rounded edges on the thumb */
}

::-webkit-scrollbar-thumb:hover {
    background: rgba(192, 192, 192, 0.7); /* Slightly less transparent when hovering */
}
.flex_row{
  display:flex;
   flex-direction:row;
  justify-content:space-between;
  align-items:center
}
  .gamepad_controls .item{
    position:absolute;
    width: 20%;
  }

  .settings{
    z-index:2;
    padding: 0.9rem;
    overflow-y: scroll;
    overflow-x: hidden;
    background: ${f_s_hsla(o_variables.o_hsla__bg)};
  }
  .right_meta1_button, .left_meta1_button{
    top: 16%;
    left: 47%;
}
.left_meta1_button{
    left: 53%;
    transform:translate(-120%,0) 
}
  .right_middle_finger_button_r2, .left_middle_finger_button_l2 {
    top: 5%;
    left: calc(50% + 26.5%);
}
.left_middle_finger_button_l2{     left: calc(50% - 26.5%); transform:translate(-120%,0) }

.right_index_finger_button_r1, .left_index_finger_button_l1 {
    top: 12%;
    left: calc(50% + 26.5%);
}
.left_index_finger_button_l1{     left: calc(50% - 26.5%); transform:translate(-120%,0) }

 .face_button_left, .direction_pad_left {
    top: 20%;
    left: calc(50% + 26.5%);
}
.direction_pad_left{     left: calc(50% - 26.5%); transform:translate(-120%,0) }

 .face_button_top, .direction_pad_up {
    top: 27%;
    left: calc(50% + 26.5%);
}
.direction_pad_up{     left: calc(50% - 26.5%); transform:translate(-120%,0) }

 .face_button_right, .direction_pad_right {
    top: 35%;
    left: calc(50% + 26.5%);
}
.direction_pad_right{     left: calc(50% - 26.5%); transform:translate(-120%,0) }

 .face_button_bottom, .direction_pad_down {
    top: 43%;
    left: calc(50% + 26.5%);
}
.direction_pad_down{     left: calc(50% - 26.5%); transform:translate(-120%,0) }

 .right_stick_y_axis, .left_stick_y_axis {
    top: 81%;
    left: calc(45% + 0.0%);
}
.left_stick_y_axis{     left: calc(52% - 0.0%); transform:translate(-120%,0) }



  .text {
      right: 0;
      position: absolute;
  }

  .text2 {
      position: absolute;
      top: -41px;
  }

  .line3 {
      height: 50px;
      border-left: 3px solid rgba(222, 222, 222, 0.8);
      position: absolute;
      top: 0;
      left: 0;
  }
  .o_cursor_virtual{
    width:5vmin;
    height:5vmin; 
    pointer-events: none;
    transform: translate(-50%,-50%);

  }
  .o_cursor_virtual .r1,
  .o_cursor_virtual .r2,
  .o_cursor_virtual .r3{
    position: absolute;
    top:50%;
    left:50%;
    border-radius:50%;
    transform: translate(-50%,-50%);
  }
  .o_cursor_virtual .r1{
    border: 3px solid green;
    width:100%;
    height:100%;
  }
  .o_cursor_virtual .r2{
    border: 1px solid green;
    width:90%;
    height:90%;
  }
  .o_cursor_virtual .r3{
    border: 5px solid green;
    width:5%;
    height:5%;
  }

  ${
      f_s_css_from_o_variables(
          o_variables
      )
  }
  `

);

let o_el_vid = document.querySelector('video');
if(!o_el_vid){
    o_el_vid = document.createElement('video');
    document.body.appendChild(o_el_vid)
}
let o_el_canvas = document.querySelector('canvas');
// let o_ctx = null;
if(!o_el_canvas){
  let o_div = document.createElement('div');
  o_div.className = 'canvas_container'
  o_el_canvas = document.createElement('canvas');
  o_div.appendChild(o_el_canvas)
  document.body.appendChild(o_div);
  window.o_el_canvas = o_el_canvas
}

// Handle the context lost event
o_el_canvas.addEventListener('webglcontextlost', function(event) {
  event.preventDefault();
  console.log('WebGL context lost');
  // Perform any necessary cleanup or state saving here
}, false);

// Handle the context restored event
o_el_canvas.addEventListener('webglcontextrestored', async function(event) {
  console.log('WebGL context restored');
  // Reinitialize your WebGL context and resources here
  await f_init_gpu();
}, false);


let n_len_a_o_trn = 50;
let n_idx_a_o_trn = 0;
let o_gpu_gateway = null;
let f_init_gpu = async function(){

  o_gpu_gateway = await f_o_gpu_gateway(
      o_el_canvas, 
      `#version 300 es
      in vec4 a_o_vec_position_vertex;
      out vec2 o_trn_nor_pixel;
      void main() {
          gl_Position = a_o_vec_position_vertex;
          o_trn_nor_pixel = (a_o_vec_position_vertex.xy) / 2.0; // Convert from clip space to texture coordinates
      }`,
      `#version 300 es
      precision mediump float;
      in vec2 o_trn_nor_pixel;
      out vec4 fragColor;
      uniform float n_ms_time;
      uniform float n_b_display_image_modes;
      uniform float n_factor_scale;
      uniform float n_factor_brightness;
      uniform float n_factor_contrast;
      uniform float n_factor_gamma;
      uniform float n_x_trn_nor;
      uniform float n_y_trn_nor;
      uniform float n_idx_a_s_image_mode;
      uniform vec2 o_trn_nor_mouse;
      uniform vec2 o_trn_nor_mouse_last;
      uniform vec2 o_trn_nor_mouse_follow;
      uniform vec2 o_scl_canvas;
      uniform sampler2D image_from_video;
  
      vec4 f_o_convolved_static_3x3(
        vec2 o_trn, 
        float[3*3] a_n_factor_weight_krnl
    ){
    
        vec2 o_scl_krnl = vec2(3.);
        vec2 o_scl_krnl_half = floor(o_scl_krnl/2.);
        
        
        vec4 o_col_sum = vec4(0.);
        float n_factor_sum = 0.;
        for(float n_x = 0.; n_x < o_scl_krnl.x; n_x+=1.){
            for(float n_y = 0.; n_y < o_scl_krnl.y; n_y+=1.){
                vec2 o_trn_krnl = vec2(n_x, n_y);
                vec2 o_trn_krnl2 = o_trn_krnl-o_scl_krnl_half;
                float n_idx_a_n_krnl = n_y*o_scl_krnl.x + n_x;
                float n_factor = a_n_factor_weight_krnl[int(n_idx_a_n_krnl)];
                n_factor_sum+=n_factor;
    
                vec4 o_col_tmp =
                    texture(
                      image_from_video,
                        (o_trn+o_trn_krnl2.xy)/o_scl_canvas.xy
                    )*n_factor;
                o_col_sum+= o_col_tmp;
            }
        }
        vec4 o_col_res = o_col_sum;
        if(n_factor_sum>0.){
            o_col_res/n_factor_sum;
        }
        return o_col_res;
    
    
    }
  
      vec4 f_o_convolved_static_3x32(
        vec2 o_trn, 
        float[3*3] a_n_factor_weight_krnl 
      ){
      
          vec2 o_scl_krnl = vec2(3.);
          vec2 o_scl_krnl_half = floor(o_scl_krnl/2.);
          
          vec4 o_col_sum = vec4(0.);
          float n_factor_sum = 0.;
          for(float n_x = 0.; n_x < o_scl_krnl.x; n_x+=1.){
              for(float n_y = 0.; n_y < o_scl_krnl.y; n_y+=1.){
                  vec2 o_trn_krnl = vec2(n_x, n_y);
                  vec2 o_trn_krnl2 = o_trn_krnl-o_scl_krnl_half;
                  float n_idx_a_n_krnl = n_y*o_scl_krnl.x + n_x;
                  float n_factor = a_n_factor_weight_krnl[int(n_idx_a_n_krnl)];
                  n_factor_sum+=n_factor;
                  vec4 o_col_tmp =
                      texture(
                          image_from_video,
                          (o_trn+o_trn_krnl2.xy)/o_scl_canvas.xy
                      )*n_factor;
                  o_col_sum+= o_col_tmp;
              }
          }
          vec4 o_col_res = o_col_sum;
          if(n_factor_sum > 0.0){
            // could be devision by zero, for example for a edge detection sobel kernel 
            o_col_res = o_col_res/n_factor_sum;
          }
          return (o_col_res);
      
      
      }
      void main() {
        //o_trn_nor_pixel normalized pixel coordinates from -1.0 -1.0 to 1.0 1.0
        float n_idx_a_s_image_mode_mutable = n_idx_a_s_image_mode;
        vec2 o_trn_nor = vec2(n_x_trn_nor, n_y_trn_nor);
        vec2 o_trn2 = ((o_trn_nor_pixel)+.5);
  
        if(
          o_trn2.x > 1.
          || o_trn2.x < 0.
          || o_trn2.y > 1.
          || o_trn2.y < 0.
        ){
          fragColor = vec4(vec3(0.), 1.);
          return;
        }
        o_trn2.y = 1.-o_trn2.y;
        vec2 o2 = (o_trn2 *${o_state.o_config.a_s_image_mode.length}.);
        vec2 o2f = fract(o2);
  
        float b_image_modes_preview = float(o2.x <= 1.0 && n_b_display_image_modes == 1.0);
        if(b_image_modes_preview == 1.0){
          n_idx_a_s_image_mode_mutable = floor(o2.y);
          o_trn2 = o2f;
        }else{
          o_trn2 -= .5;
          o_trn2 *= n_factor_scale;
          o_trn2 += .5;
          o_trn2 += o_trn_nor;
        }
        if(
          o_trn2.x > 1. || o_trn2.x < 0.
          || o_trn2.y > 1. || o_trn2.y < 0.
          ){
            fragColor = vec4(vec3(0.), 1.);
            return;
        }
        
        vec4 o_pixel_value_image_from_video = texture(image_from_video, o_trn2); 
        fragColor =o_pixel_value_image_from_video;
        if(n_idx_a_s_image_mode_mutable == ${(o_state.o_config.a_s_image_mode.indexOf("rgba_normal"))}.){
          // do nothing 
        }
        if(n_idx_a_s_image_mode_mutable == ${(o_state.o_config.a_s_image_mode.indexOf("rgba_inverted"))}.){
          fragColor = vec4(vec3(1.)-fragColor.rgb, 1.);
        }
        if(n_idx_a_s_image_mode_mutable == ${(o_state.o_config.a_s_image_mode.indexOf("red_channel_only"))}.){
          fragColor *= vec4(1., 0., 0., 1.);
        }
        if(n_idx_a_s_image_mode_mutable == ${(o_state.o_config.a_s_image_mode.indexOf("green_channel_only"))}.){
          fragColor *= vec4(0., 1., 0., 1.);
        }
        if(n_idx_a_s_image_mode_mutable == ${(o_state.o_config.a_s_image_mode.indexOf("blue_channel_only"))}.){
          fragColor *= vec4(0., 0., 1., 1.);
        }
        if(n_idx_a_s_image_mode_mutable == ${(o_state.o_config.a_s_image_mode.indexOf("edge_detection"))}.){
          vec2 o_trn = o_trn2*o_scl_canvas;
          vec4 o_col_sobel_x = f_o_convolved_static_3x3(
              o_trn,
              float[](
                //sobel edge detection x
                -1., 0., 1.,
                -2., 0., 2.,
                -1., 0., 1.
              )
          );
          vec4 o_col_sobel_y = f_o_convolved_static_3x3(
              o_trn,
              float[](
                //sobel edge detection y
                1., 2., 1.,
                0., 0., 0.,
                -1., -2., -1.
              )
          );
          
          vec4 o_col_sobel_x_pow = pow(abs(o_col_sobel_x),vec4(2.));
          vec4 o_col_sobel_y_pow = pow(o_col_sobel_y,vec4(2.));
          fragColor = vec4(
            sqrt(o_col_sobel_x_pow.x+o_col_sobel_y_pow.x),
            sqrt(o_col_sobel_x_pow.y+o_col_sobel_y_pow.y),
            sqrt(o_col_sobel_x_pow.z+o_col_sobel_y_pow.z),
            o_pixel_value_image_from_video.w
          );
  
        }
  
        if(n_idx_a_s_image_mode_mutable == ${(o_state.o_config.a_s_image_mode.indexOf("sharpen"))}.){
          fragColor = f_o_convolved_static_3x3(
              o_trn2*o_scl_canvas,
              float[](
                0., -1., 0.,
                -1., 5., -1.,
                0., -1., 0.
              )
          );
          return;
      }
      if(n_idx_a_s_image_mode_mutable == ${(o_state.o_config.a_s_image_mode.indexOf("gaussian_blur"))}.){
        fragColor = f_o_convolved_static_3x3(
            o_trn2*o_scl_canvas,
            float[](
              1., 2., 1.,
              2., 4., 2.,
              1., 2., 1.
            )
        );
      }
      if(n_idx_a_s_image_mode_mutable == ${(o_state.o_config.a_s_image_mode.indexOf("emboss"))}.){
        fragColor = f_o_convolved_static_3x3(
            o_trn2*o_scl_canvas,
            float[](
              -2., -1., 0.,
              -1., 1. , 1.,
              0., 1., 2.
            )
        );
      }
      if(n_idx_a_s_image_mode_mutable == ${(o_state.o_config.a_s_image_mode.indexOf("outline_edge"))}.){
        fragColor.xyz = f_o_convolved_static_3x3(
            o_trn2*o_scl_canvas,
            float[](
              -1., -1., -1.,
              -1.,  8., -1.,
              -1., -1., -1.
            )
        ).xyz;
        
      }
  
      
  
        // apply the image styles at the end 
        fragColor *= n_factor_brightness;
        fragColor.rgb = ((fragColor.rgb - 0.5) * n_factor_contrast + 0.5);
        fragColor.rgb = pow(fragColor.rgb, vec3(1.0 / n_factor_gamma));
        // fragColor.rgb = fract(fragColor.rgb);
        if(
          n_idx_a_s_image_mode_mutable == n_idx_a_s_image_mode
          && b_image_modes_preview == 1.0 
        ){
          vec2 o3 = (o2f - vec2(0.5) - o_trn_nor);
          float n_dist_border = max(abs(o3.x), abs(o3.y))-.5*n_factor_scale;
          n_dist_border = smoothstep(0.0, 0.01, n_dist_border);
          n_dist_border = clamp(0.0, 1.0, n_dist_border);
          n_dist_border = sin(n_dist_border*3.);
          fragColor += vec4(vec3(n_dist_border),1.);
        }
      }
      `,
  )
}
await f_init_gpu();

var a_o_trn = new Float32Array(new Array(n_len_a_o_trn*4).fill(0));
var buffer = o_gpu_gateway.o_ctx.createBuffer();

o_gpu_gateway.o_ctx.bindBuffer(o_gpu_gateway.o_ctx.ARRAY_BUFFER, buffer);
o_gpu_gateway.o_ctx.bufferData(o_gpu_gateway.o_ctx.ARRAY_BUFFER, a_o_trn, o_gpu_gateway.o_ctx.STATIC_DRAW);
var o_location_a_o_trn = o_gpu_gateway.o_ctx.getUniformLocation(o_gpu_gateway.o_shader__program, 'a_o_trn');
o_gpu_gateway.o_ctx.uniform4fv(o_location_a_o_trn, a_o_trn);



// o_ctx = o_el_canvas.getContext('2d');


let f_reset_image_manipulation = function(){
  o_state.o_config.n_x_trn_nor = 0
  o_state.o_config.n_y_trn_nor = 0
  o_state.o_config.n_factor_scale = 1
  o_state.o_config.n_factor_brightness = 1
  o_state.o_config.n_factor_contrast = 1
  o_state.o_config.n_factor_gamma = 2.2
}




let f_n_grouped_value = function(
  s_name
){
  let n = 0;
  let o_input_sensor = (o_state.v_o_input_device?.a_o_input_sensor?.find(o=>o.s_name == s_name));
  if(o_input_sensor)
  {
    return o_input_sensor.n_nor;
  }
  // the value could also be enum like
  if(o_state.v_o_input_device?.a_o_input_sensor?.find(o=>o.s_name == 'direction_pad_values')?.v_o_num_str_value?.a_s_name.includes(s_name)){
    n = 1
  }

  return n
}
let f_n_signed_nor_with_threshhold = function(
  s_name, 
  n_threshhold
){  
  let v_o = (o_state?.v_o_input_device?.a_o_input_sensor?.find(o=> o.s_name == s_name ));

  let n_tmp = ((v_o?.n_nor)-.5)*2.;
  if(Math.abs(n_tmp) <= n_threshhold){
    n_tmp = 0
  }
  return n_tmp
}
window.o_state = o_state
let f_update_a_o_camera = async function(){
  let a_o_device = await navigator.mediaDevices.enumerateDevices();
  
  console.log(a_o_device)
  for(let o_device of a_o_device){
    if(o_device.kind != 'videoinput'){
      continue
    }

    let o_camera = new O_camera(
      o_device.deviceId,
      o_device.groupId,
      o_device.kind,
      o_device.label,
      [], 
      [], 
      0
    );
    let o_camera_existing = o_state.o_config.a_o_camera.find(o=>o.deviceId == o_camera.s_deviceId);
    if(o_camera_existing){
      console.log(o_camera_existing)
      console.log(`camera already exists in config`)
      continue
    }

    let o_notification_tmp = f_o_throw_notification(o_state.o_state__notifire,`Found a new camera: ${o_camera.s_label}`, 'loading');
    o_state.o_config.a_o_camera.push(o_camera)
    try {
      const stream = await navigator.mediaDevices.getUserMedia(
        {
          video: {
            deviceId: { exact: o_camera.s_deviceId }
          }
        }
      );

      o_state.o_video_track = stream.getVideoTracks()[0];
      let o_s_name_o_capability = o_state.o_video_track.getCapabilities();
      stream.getTracks().forEach(track => track.stop());
      
      o_camera.a_o_video_capability = Object.keys(o_s_name_o_capability)
      .filter(s=>typeof o_s_name_o_capability[s] != 'string')
      .map(s=>{
        let o_cap = o_s_name_o_capability[s];
        return new O_video_capability(
          s, 
          o_cap.min, 
          o_cap.max, 
          o_cap.step, 
          o_cap.min
        ) 
      })

      o_camera.a_o_resolution = []
      const a_o_resolution = [
        new O_resolution(3840, 2160, '4K(UHD)'),
        new O_resolution(2560, 1440, 'QHD'),
        new O_resolution(1920, 1080, '1080p(FHD)'),
        // new O_resolution(1600, 1200, 'UXGA'),
        new O_resolution(1280, 720, '720p(HD)'),
        // new O_resolution(1024, 576, '1024x576'),
        // new O_resolution(960, 540, '960x540'),
        // new O_resolution(854, 480, '854x480'),
        // new O_resolution(800, 600, 'SVGA'),
        // new O_resolution(640, 480, 'VGA'),
        // new O_resolution(640, 360, '360p(nHD)'),
        // new O_resolution(480, 360, '480x360'),
        // new O_resolution(352, 288, 'CIF'),
        new O_resolution(320, 240, 'QVGA'),
        // new O_resolution(320, 180, '320x180'),
        // new O_resolution(176, 144, 'QCIF'),
        // new O_resolution(160, 120, 'QQVGA'),
      ];
      let a_o_tmp = []
      for (const o_resolution of a_o_resolution) {
        await Promise.all(a_o_tmp.map((o)=>{f_clear_o_notification(o)}))
        a_o_tmp.push(
          await f_o_throw_notification(o_state.o_state__notifire,`Checking support for resolution: ${o_resolution.n_scl_x_px}x${o_resolution.n_scl_y_px}`, 'loading')
        )
        const o_constraints = {
          audio: false,
          video: {
            deviceId: { exact: o_camera.s_deviceId },
            width: { exact: o_resolution.n_scl_x_px },
            height: { exact: o_resolution.n_scl_y_px }
          }
        };
    
        try {
          const stream = await navigator.mediaDevices.getUserMedia(o_constraints);
          stream.getTracks().forEach(track => track.stop());
          a_o_tmp.push(
            await f_o_throw_notification(o_state.o_state__notifire,`Resolution available`, 'success')
          )
          o_camera.a_o_resolution.push(o_resolution);
        } catch (error) {
          console.log(o_camera)
          a_o_tmp.push(
            await f_o_throw_notification(o_state.o_state__notifire,`o_resolution: ${JSON.stringify(o_resolution)} not available for this device`, 'error')
          )

          console.error(error)
          // Resolution not available for this device
        }
        await new Promise((f_res)=>{
          window.setTimeout(()=>{
            return f_res(true)
          },200 // https://webrtchacks.github.io/WebRTC-Camera-Resolution/ had this at 200
          )
        })
      }
      await Promise.all(a_o_tmp.map((o)=>{f_clear_o_notification(o)}))

      // console.log(o_camera)
  
    //   if ('exposureMode' in capabilities) {
    //     return capabilities.exposureMode.includes('manual');
    //   } else {
    //     return false;
    //   }
    } catch (error) {
      console.error('Error accessing camera:', error);
      return false;
    }

    await f_clear_all_notifications(o_state.o_state__notifire)
  }
  return true
}
o_notification_tmp = f_o_throw_notification(o_state.o_state__notifire,`Loading usb cameras...`, 'loading')
await f_update_a_o_camera();
await f_clear_o_notification(o_notification_tmp)

let f_update_n_idx_a_o_camera = async function(
  n_summand
){
  
  let n_idx_a_o_camera = f_n_idx_ensured_inside_array(o_state.o_config.n_idx_a_o_camera+n_summand, o_state.o_config.a_o_camera.length)

  let o_camera_old = o_state.o_config.a_o_camera[o_state.o_config.n_idx_a_o_camera];
  let o_resolution_old = o_camera_old.a_o_resolution[o_camera_old.n_idx_a_o_resolution];

  o_state.o_config.n_idx_a_o_camera = n_idx_a_o_camera;

  let o_camera_new = o_state.o_config.a_o_camera[n_idx_a_o_camera];

  let v_n_idx_a_o_resolution = null;
  let o_resolution__same = o_camera_new.a_o_resolution.find((o, n_idx)=>{
    if(o.n_scl_x_px == o_resolution_old.n_scl_x_px
    && o.n_scl_y_px == o_resolution_old.n_scl_y_px){
      v_n_idx_a_o_resolution = n_idx; 
      return true
    }
  });
  let o_resolution = null;
  if(o_resolution__same){
    o_camera_new.n_idx_a_o_resolution = v_n_idx_a_o_resolution;
    o_resolution = o_resolution__same
  }else{
    // find best resolution'
    o_resolution = o_camera_new.a_o_resolution.sort((o1,o2)=>{return o1.n_scl_x_px*o1.n_scl_y_px - o2.n_scl_x_px*o2.n_scl_y_px})[0];
    o_camera_new.n_idx_a_o_resolution = o_camera_new.a_o_resolution.indexOf(o_resolution);
  }
  if(o_state.o_user_media_stream){
    o_state.o_user_media_stream.getTracks().forEach(track => track.stop());
  }


  // update camera notification 
  o_state.o_user_media_stream = await navigator.mediaDevices.getUserMedia({
      video: {
        deviceId: {
          exact: o_camera_new.s_deviceId
        },
        width: o_resolution.n_scl_x_px,
        height: o_resolution.n_scl_y_px,
      }
  });
  o_el_vid.srcObject = o_state.o_user_media_stream;
  
}


let n_ms_wpn__last_config_update = window.performance.now();
  window.f_update_n_idx_a_o_camera = f_update_n_idx_a_o_camera;
 
async function f_start_render_loop() {

  await f_update_n_idx_a_o_camera(0);

  let gl = o_gpu_gateway.o_ctx;


  let n_ms_delta_max = 1000/o_state.n_fps;
  let n_ms_last = 0;
  let n_c = 0;
    function f_render() {
      // if(document.hidden){
      //   console.log("tab not active")
      //   return;
      // }
      n_c +=1;
      if(n_c == 100){
        f_resize_canvas()
      }
      let n_ms = window.performance.now();
      if((n_ms - n_ms_wpn__last_config_update) > o_state.o_config.n_ms_config_auto_background_save_interval){
        console.log(`${new Date()}: config auto save!`);
        f_o_ws_response({
          s_name_function: s_name_ws_action__f_b_write_s_text_file, 
          s_path_rel: s_name_file_config,
          s_text: JSON.stringify(o_state.o_config, null, 4)
        });
        n_ms_wpn__last_config_update = n_ms;
      }
      let n_ms_delta = n_ms - n_ms_last;
      if(n_ms_delta > n_ms_delta_max){
        if (
          (o_state.b_webcam_available && 
          o_el_vid.readyState >= o_el_vid.HAVE_CURRENT_DATA)
          || !o_state.b_webcam_available
          ) {

          let a_o_el_under_cursor_virtual = Array.from(document.querySelectorAll("input")).filter(o=>{

              let o2 = (o.getBoundingClientRect());
              return (o_state.o_cursor_virtual.o_trn.n_x >= o2.left && o_state.o_cursor_virtual.o_trn.n_y >= o2.top)
                  && (o_state.o_cursor_virtual.o_trn.n_x <= o2.left+o2.width && o_state.o_cursor_virtual.o_trn.n_y <= o2.top+o2.height )
          });
          // console.log(a_o_el_under_cursor_virtual)
          // process input from controller 

          let b_remap_input_action = o_state.o_config.o_input_action_mapping != null;
          if(b_remap_input_action){
            // re-map an input 
            let a_o_keyboard_key_not_same_as_last = o_state.a_o_keyboard_key.filter(o=>{
              return o.b_down != o.b_down__last
            });
            let o_keyboard_key = a_o_keyboard_key_not_same_as_last?.[0];
            
            if(o_keyboard_key){
              o_state.o_config.o_input_action_mapping.s_name_char_keyboard = o_keyboard_key.s_name;
              o_state.o_config.o_input_action_mapping = null;
              o_state.o_js__action_mapping?._f_render?.(); 
            }
            let a_o_input_sensor_not_same_as_last = o_state?.v_o_input_device?.a_o_input_sensor.map(
              (o_input_sensor, n_idx)=>{
                let o_input_sensor__last = o_state.v_o_input_device__last?.a_o_input_sensor?.[n_idx]
                let n_nor_diff = o_input_sensor?.n_nor - o_input_sensor__last?.n_nor;
                if(n_nor_diff == 0){return false}
                return {
                  n_nor_diff,
                  o_input_sensor
                }
            })
            .filter(v=>v)
            .sort(
              (o1, o2)=>{
               return o2.n_nor_diff-o1.n_nor_diff
              }
            );
            let o_input_sensor = a_o_input_sensor_not_same_as_last?.[0]?.o_input_sensor;
            if(o_input_sensor && o_state.o_config.o_input_action){
              o_state.o_config.o_input_action_mapping.s_name_char_keyboard.s_name_input__controller = o_input_sensor.s_name;
              o_state.o_config.o_input_action_mapping = null;
              o_state.o_js__action_mapping?._f_render?.(); 
            }
          }



          o_state.v_o_keyboard_key__o_input_action_mapping__prev_action_layer = o_state.a_o_keyboard_key.find(o=>o.s_name == o_state.o_input_action_mapping__next_action_layer?.s_name_char_keyboard)
          o_state.v_o_keyboard_key__o_input_action_mapping__next_action_layer = o_state.a_o_keyboard_key.find(o=>o.s_name == o_state.o_input_action_mapping__prev_action_layer?.s_name_char_keyboard)
          o_state.v_o_keyboard_key__o_input_action_mapping__keep_hold_down_toggle_layer2 = o_state.a_o_keyboard_key.find(o=>o.s_name == o_state.o_input_action_mapping__keep_hold_down_toggle_layer3?.s_name_char_keyboard)
          o_state.v_o_keyboard_key__o_input_action_mapping__keep_hold_down_toggle_layer3 = o_state.a_o_keyboard_key.find(o=>o.s_name == o_state.o_input_action_mapping__keep_hold_down_toggle_layer2?.s_name_char_keyboard)

          if(!b_remap_input_action){
            
            if(o_state.o_config.b_layer_switch_type_on_click_cycle_through){

              let b_next = (o_state.v_o_input_sensor__o_input_action_mapping__next_action_layer?.n_nor > 0 || o_state.v_o_keyboard_key__o_input_action_mapping__next_action_layer?.b_down);
              let b_next__last = (o_state.v_o_input_sensor__o_input_action_mapping__next_action_layer?.n_nor__last > 0 || o_state.v_o_keyboard_key__o_input_action_mapping__next_action_layer?.b_down__last);
              let b_prev = (o_state.v_o_input_sensor__o_input_action_mapping__prev_action_layer?.n_nor > 0 || o_state.v_o_keyboard_key__o_input_action_mapping__prev_action_layer?.b_down);
              let b_prev__last = (o_state.v_o_input_sensor__o_input_action_mapping__prev_action_layer?.n_nor__last > 0 || o_state.v_o_keyboard_key__o_input_action_mapping__prev_action_layer?.b_down__last);
              let n_summand = (
                b_next && !b_next__last
              ) ? 1 :
              (
                b_prev && !b_prev__last
              ) ? -1 : 
              0;
                let n_len = o_state.o_config.a_o_action_layer.length;
              o_state.o_config.n_idx_a_o_action_layer = (o_state.o_config.n_idx_a_o_action_layer+n_summand)%n_len;
              if(o_state.o_config.n_idx_a_o_action_layer < 0){
                o_state.o_config.n_idx_a_o_action_layer = n_len-1;
              }
            }else{

              let b_l2 = (o_state.v_o_input_sensor__o_input_action_mapping__keep_hold_down_toggle_layer3?.n_nor > 0 || o_state.v_o_keyboard_key__o_input_action_mapping__keep_hold_down_toggle_layer3?.b_down);
              let b_l2__last = (o_state.v_o_input_sensor__o_input_action_mapping__keep_hold_down_toggle_layer3?.n_nor__last > 0 || o_state.v_o_keyboard_key__o_input_action_mapping__keep_hold_down_toggle_layer3?.b_down__last);
              let b_l3 = (o_state.v_o_input_sensor__o_input_action_mapping__keep_hold_down_toggle_layer2?.n_nor > 0 || o_state.v_o_keyboard_key__o_input_action_mapping__keep_hold_down_toggle_layer2?.b_down);
              let b_l3__last = (o_state.v_o_input_sensor__o_input_action_mapping__keep_hold_down_toggle_layer2?.n_nor__last > 0 || o_state.v_o_keyboard_key__o_input_action_mapping__keep_hold_down_toggle_layer2?.b_down__last);

              o_state.o_config.n_idx_a_o_action_layer = (
                b_l2 && ((!o_state.o_config.b_layer_switch_keep_pressed_required) ? !b_l2__last : true)
              ) ? 1 : (
                b_l3 && ((!o_state.o_config.b_layer_switch_keep_pressed_required) ? !b_l3__last : true)
              ) ? 2 : (
                o_state.o_config.b_layer_switch_keep_pressed_required
              ) ? 0 : o_state.o_config.n_idx_a_o_action_layer
              
            }
            if(o_state.o_config.n_idx_a_o_action_layer != o_state.o_config.n_idx_a_o_action_layer__last){
              // console.log("switch")
              // console.log(o_state.o_config.n_idx_a_o_action_layer)
              // console.log(o_state.o_config.n_idx_a_o_action_layer__last)
              if(!o_state.o_js__o_action_layer._b_rendering){
                o_state.o_js__o_action_layer._f_render();
              }
            }
            let a_o_action_layer = o_state.o_config.a_o_action_layer[o_state.o_config.n_idx_a_o_action_layer]
            let s_overlay_info_tmp_text = '';
            let b_any_input = false;
            for(let o_input_action_mapping of a_o_action_layer.a_o_input_action_mapping){
              let o_input_action = o_input_action_mapping.o_input_action;
                o_input_action.v_o_keyboard_key = o_state.a_o_keyboard_key.find(o=>{
                  return o.s_name.toLowerCase() == o_input_action_mapping.s_name_char_keyboard.toLowerCase()
                });
                o_input_action.v_o_input_sensor = o_state?.v_o_input_device?.a_o_input_sensor?.find(
                  (o, n_idx)=>{
                    if(o.s_name == o_input_action_mapping.s_name_input__controller){
                      o_input_action.v_o_input_sensor_last = o_state?.v_o_input_device__last?.a_o_input_sensor?.[n_idx];
                      return true 
                    }
                  }
                ) 
                let b_down = o_input_action?.v_o_keyboard_key?.b_down || (o_input_action?.v_o_input_sensor?.n_nor > 0.0);
                let b_down__last = o_input_action?.v_o_keyboard_key?.b_down__last || (o_input_action?.v_o_input_sensor?.n_nor__last > 0.0);

                if(
                  !o_input_action?.v_o_keyboard_key
                  && 
                  !o_input_action.v_o_input_sensor
                  || 
                  (!b_down && !b_down__last)
                ){
                  // console.log(o_input_action?.v_o_keyboard_key,o_input_action.v_o_input_sensor);
                  continue
                }
                b_any_input = true;
                o_state.n_wpn_last_input = performance.now()

                
                if(o_input_action.s_name == o_mod_autogenerated.o_input_action__move_digital_x_plus.s_name){
                    o_state.o_config.n_x_trn_nor += (o_input_action?.v_o_keyboard_key?.b_down) ? +0.01 : 0;
                    o_state.o_config.n_x_trn_nor += (o_input_action?.v_o_input_sensor?.n_nor) ? +Math.abs(o_input_action?.v_o_input_sensor?.n_nor) : 0;
                    s_overlay_info_tmp_text += [
                      o_input_action.s_name, 
                      o_state.o_config.n_x_trn_nor
                    ].join('\n')
                  }
                  if(o_input_action.s_name == o_mod_autogenerated.o_input_action__move_digital_x_minus.s_name){
                    o_state.o_config.n_x_trn_nor += (o_input_action?.v_o_keyboard_key?.b_down) ? -0.01 : 0;
                    o_state.o_config.n_x_trn_nor += (o_input_action?.v_o_input_sensor?.n_nor) ? -Math.abs(o_input_action?.v_o_input_sensor?.n_nor) : 0;
                    s_overlay_info_tmp_text += [
                      o_input_action.s_name, 
                      o_state.o_config.n_x_trn_nor
                    ].join('\n')
                  }
                  if(o_input_action.s_name == o_mod_autogenerated.o_input_action__move_digital_y_plus.s_name){
                    o_state.o_config.n_y_trn_nor += (o_input_action?.v_o_keyboard_key?.b_down) ? -0.01 : 0;
                    o_state.o_config.n_y_trn_nor += (o_input_action?.v_o_input_sensor?.n_nor) ? -Math.abs(o_input_action?.v_o_input_sensor?.n_nor) : 0;
                    s_overlay_info_tmp_text += [
                      o_input_action.s_name, 
                      o_state.o_config.n_y_trn_noror
                    ].join('\n')
                  }
                  if(o_input_action.s_name == o_mod_autogenerated.o_input_action__move_digital_y_minus.s_name){
                    o_state.o_config.n_y_trn_nor += (o_input_action?.v_o_keyboard_key?.b_down) ? +0.01 : 0;
                    o_state.o_config.n_y_trn_nor += (o_input_action?.v_o_input_sensor?.n_nor) ? + Math.abs(o_input_action?.v_o_input_sensor?.n_nor) : 0;
                    s_overlay_info_tmp_text += [
                      o_input_action.s_name, 
                      o_state.o_config.n_y_trn_noror
                    ].join('\n')
                  }
                  if(o_input_action.s_name == o_mod_autogenerated.o_input_action__zoom_digital_plus.s_name){
                    o_state.o_config.n_factor_scale += (o_input_action?.v_o_keyboard_key?.b_down) ? +0.01 : 0;
                    o_state.o_config.n_factor_scale += (o_input_action?.v_o_input_sensor?.n_nor) ? + Math.abs(o_input_action?.v_o_input_sensor?.n_nor) : 0;
                    s_overlay_info_tmp_text += [
                      o_input_action.s_name, 
                      o_state.o_config.n_factor_scale
                    ].join('\n')
                  }
                  if(o_input_action.s_name == o_mod_autogenerated.o_input_action__zoom_digital_minus.s_name){
                    o_state.o_config.n_factor_scale += (o_input_action?.v_o_keyboard_key?.b_down) ? -0.01 : 0;
                    o_state.o_config.n_factor_scale += (o_input_action?.v_o_input_sensor?.n_nor) ? - Math.abs(o_input_action?.v_o_input_sensor?.n_nor) : 0;
                    s_overlay_info_tmp_text += [
                      o_input_action.s_name, 
                      o_state.o_config.n_factor_scale
                    ].join('\n')
                  }
                  if(o_input_action.s_name == o_mod_autogenerated.o_input_action__image_contrast_plus.s_name){
                    o_state.o_config.n_factor_contrast += (o_input_action?.v_o_keyboard_key?.b_down) ? +0.01 : 0;
                    o_state.o_config.n_factor_contrast += (o_input_action?.v_o_input_sensor?.n_nor) ? + Math.abs(o_input_action?.v_o_input_sensor?.n_nor) : 0;
                    s_overlay_info_tmp_text += [
                      o_input_action.s_name, 
                      o_state.o_config.n_factor_contrast
                    ].join('\n')
                  }
                  if(o_input_action.s_name == o_mod_autogenerated.o_input_action__image_contrast_minus.s_name){
                    o_state.o_config.n_factor_contrast += (o_input_action?.v_o_keyboard_key?.b_down) ? -0.01 : 0;
                    o_state.o_config.n_factor_contrast += (o_input_action?.v_o_input_sensor?.n_nor) ? - Math.abs(o_input_action?.v_o_input_sensor?.n_nor) : 0;
                    s_overlay_info_tmp_text += [
                      o_input_action.s_name, 
                      o_state.o_config.n_factor_contrast
                    ].join('\n')
                  }
                  if(o_input_action.s_name == o_mod_autogenerated.o_input_action__image_gamma_plus.s_name){
                    o_state.o_config.n_factor_gamma += (o_input_action?.v_o_keyboard_key?.b_down) ? +0.01 : 0;
                    o_state.o_config.n_factor_gamma += (o_input_action?.v_o_input_sensor?.n_nor) ? + Math.abs(o_input_action?.v_o_input_sensor?.n_nor) : 0;
                    s_overlay_info_tmp_text += [
                      o_input_action.s_name, 
                      o_state.o_config.n_factor_gamma
                    ].join('\n')
                  }
                  if(o_input_action.s_name == o_mod_autogenerated.o_input_action__image_gamma_minus.s_name){
                    o_state.o_config.n_factor_gamma += (o_input_action?.v_o_keyboard_key?.b_down) ? -0.01 : 0;
                    o_state.o_config.n_factor_gamma += (o_input_action?.v_o_input_sensor?.n_nor) ? - Math.abs(o_input_action?.v_o_input_sensor?.n_nor) : 0;
                    s_overlay_info_tmp_text += [
                      o_input_action.s_name, 
                      o_state.o_config.n_factor_gamma
                    ].join('\n')
                  }

                  if(o_input_action.s_name == o_mod_autogenerated.o_input_action__reset_image_manipulation .s_name){
                    o_state.o_config.n_factor_scale = 1.
                    o_state.o_config.n_factor_brightness = 1.
                    o_state.o_config.n_factor_contrast = 1.
                    o_state.o_config.n_factor_gamma = 1.0// i assume the js webcam capturing api already does gamma correction
                    o_state.o_config.n_x_trn_nor = 0.
                    o_state.o_config.n_y_trn_nor = 0.
                    s_overlay_info_tmp_text += [
                      `reset image manipulation to:`,
                      `n_factor_scale: ${o_state.o_config.n_factor_scale}`,
                      `n_factor_brightness: ${o_state.o_config.n_factor_brightness}`,
                      `n_factor_contrast: ${o_state.o_config.n_factor_contrast}`,
                      `n_factor_gamma: ${o_state.o_config.n_factor_gamma}`,
                      `n_x_trn_nor: ${o_state.o_config.n_x_trn_nor}`,
                      `n_y_trn_nor: ${o_state.o_config.n_y_trn_nor}`,
                    ].join('\n')
                  }
                 
                if(o_input_action.s_name.startsWith('usb_camera')){
                  if(
                    b_down && !b_down__last && !o_state.b_render__settings
                  ){
                    
  
                    // Example output:
                    // {
                    //   brightness: { min: 0, max: 1, step: 0.1 },
                    //   contrast: { min: 0, max: 1, step: 0.1 },
                    //   saturation: { min: 0, max: 1, step: 0.1 },
                    //   sharpness: { min: 0, max: 1, step: 0.1 },
                    //   ...
                    // }
                    videoTrack.applyConstraints(constraints).then(() => {
                      console.log('Constraints applied successfully');
                    }).catch(error => {
                      console.error('Error applying constraints:', error);
                    });
                  }

                }
                if(o_input_action.s_name == o_mod_autogenerated.o_input_action__next_image_mode.s_name){
                  if(
                    b_down && !b_down__last && !o_state.b_render__settings
                  ){
                    o_state.o_config.n_idx_a_s_image_mode = (o_state.o_config.n_idx_a_s_image_mode+1)%o_state.o_config.a_s_image_mode.length
                    let s = o_state.o_config.a_s_image_mode[o_state.o_config.n_idx_a_s_image_mode]
                    s_overlay_info_tmp_text += [
                      o_input_action.s_name, 
                      `'${s}'`
                    ].join('\n')
                    
                  }
                }
                if(o_input_action.s_name == o_mod_autogenerated.o_input_action__previous_image_mode.s_name){
                  if(
                    b_down && !b_down__last && !o_state.b_render__settings
                  ){
                    o_state.o_config.n_idx_a_s_image_mode -=1
                    if(o_state.o_config.n_idx_a_s_image_mode < 0){
                      o_state.o_config.n_idx_a_s_image_mode = o_state.o_config.a_s_image_mode.length-1;
                    }

                  }
                }

                if(o_input_action.s_name == o_mod_autogenerated.o_input_action__toggle_settings.s_name){
                  if(
                    b_down && !b_down__last
                    ){
                      console.log('asdf')
                    o_state.b_render__settings = !o_state.b_render__settings
                    if(!o_state.o_js__settings._b_rendering){
                      o_state?.o_js__settings._f_render()
                      // console.log("asdf")
                    }
                  }

                }
                if(o_input_action.s_name == o_mod_autogenerated.o_input_action__take_screenshot.s_name){
                  if(
                    b_down && !b_down__last && !o_state.b_render__settings
                    ){

                        let o_notification_loading = f_o_throw_notification(o_state.o_state__notifire,`saving image`, 'loading');

                        // Send JSON data to WebSocket server
                        let s_ymd_hms = f_s_ymd_hms__from_n_ts_ms_utc(new Date().getTime()).split(' ').join('_');
                        f_add_text_to_image(o_el_canvas.toDataURL('image/png')).then(s_data_url=>{
                          let o_req = {
                            s_name_function: s_name_ws_action__f_save_screenshot,
                            s_name_file: (new Function('s_ymd_hms', `return \`${o_state.s_name_file_template}\``))(...[s_ymd_hms]),
                            s_data_url
                          };
                          console.log(o_req)
                          f_o_ws_response(
                            o_req
                            
                          ).then(o=>{
                            if(o.b == true){
                              o_state.a_s_url_screenshot.push(o.s_path_rel)
                              if(!o_state?.o_js__a_s_url_screenshot?._b_rendering){
                                o_state?.o_js__a_s_url_screenshot?._f_render?.();
                              }
                              o_notification_loading.then(
                                o=>{
                                  f_clear_o_notification(o);
                                }
                              )
                              f_o_throw_notification(o_state.o_state__notifire,`image has been saved`, 'success')
                            }
                          })
                        })
                          
                        
                  }

                }
                if(o_input_action.s_name == o_mod_autogenerated.o_input_action__add_image_to_focus_stack.s_name){
                  if(
                    b_down && !b_down__last && !o_state.b_render__settings
                    ){
                      let s_data_url =o_el_canvas.toDataURL('image/png')
                      o_state.a_s_data_url__for_stacking.push(
                        s_data_url
                      );
                      f_o_throw_notification(o_state.o_state__notifire,`added image to focus stack!`, 'success');

                      if(!o_state?.o_js__a_s_data_url__for_stacking?._b_rendering){
                        o_state?.o_js__a_s_data_url__for_stacking?.f_render?.();
                      }
                      if(!o_state?.o_js__o_action_layer?._b_rendering){
                        o_state?.o_js__o_action_layer?._f_render();
                      }
  
                      // Send JSON data to WebSocket server
                      let s_ymd_hms = f_s_ymd_hms__from_n_ts_ms_utc(new Date().getTime()).split(' ').join('_');
    
                      let o_req = {
                        s_name_function: s_name_ws_action__f_add_image_to_focus_stack,
                        s_name_file: s_ymd_hms,
                        s_data_url: s_data_url
                      };
                      console.log(o_req)
                      f_o_ws_response(
                        o_req
                        
                      ).then(o=>{
                        if(o.b == true){
                          o_notification_loading.then(
                            o=>{
                              f_clear_o_notification(o);
                            }
                          )
                          f_o_throw_notification(o_state.o_state__notifire,`image has been saved`, 'success')
                        }
                      })
                    }
                }
                if(o_input_action.s_name == o_mod_autogenerated.o_input_action__finish_focus_stack.s_name){
                  if(
                    b_down && !b_down__last && !o_state.b_render__settings
                  ){
                    let o_notification_loading = f_o_throw_notification(o_state.o_state__notifire,`creating focus stack`, 'loading');
                    let s_ymd_hms = f_s_ymd_hms__from_n_ts_ms_utc(new Date().getTime()).split(' ').join('_');

                    let o_req = {
                      s_name_function: s_name_ws_action__f_create_focus_stack,
                      s_name_file:(new Function('s_ymd_hms', `return \`${o_state.s_name_file_template_focus_stack_result}\``))(...[s_ymd_hms]),

                    };
                    f_o_ws_response(
                      o_req
                      
                    ).then(o=>{
                      if(o.b == true){
                        o_notification_loading.then(
                          o=>{
                            f_clear_o_notification(o);
                          }
                        )
                        f_o_throw_notification(o_state.o_state__notifire,`image has been saved`, 'success')
                      }
                    })
                    
                  }
                }
                if(o_input_action.s_name == o_mod_autogenerated.o_input_action__add_image_to_image_stitch.s_name){
                  if(
                    b_down && !b_down__last && !o_state.b_render__settings
                    ){

                      let o_notification_loading = f_o_throw_notification(o_state.o_state__notifire,`adding image to image stitch`, 'loading');
                      let s_ymd_hms = f_s_ymd_hms__from_n_ts_ms_utc(new Date().getTime()).split(' ').join('_');
    
                      let s_data_url = o_el_canvas.toDataURL('image/png')


                      let o_req = {
                        s_name_function: s_name_ws_action__f_add_iamge_to_image_stitch,
                        s_name_file:s_ymd_hms,
                        s_data_url
                      };
                      f_o_ws_response(
                        o_req
                        
                      ).then(o=>{
                        if(o.b == true){
                          o_notification_loading.then(
                            o=>{
                              f_clear_o_notification(o);
                            }
                          )
                          o_state.s_url_image_stitch_result = o.s_path_rel;
                          o_state?.o_js__stitch_result?._f_render();
                          f_o_throw_notification(o_state.o_state__notifire,`image has been saved`, 'success')
                        }
                      })
                    }
                  
                }
                if(o_input_action.s_name == o_mod_autogenerated.o_input_action__clear_image_stitch.s_name){
                  if(
                    b_down && !b_down__last && !o_state.b_render__settings
                    ){
                      let s_ymd_hms = f_s_ymd_hms__from_n_ts_ms_utc(new Date().getTime()).split(' ').join('_');

                      let o_req = {
                        s_name_function: "f_clear_image_stitch",
                      };
                      let o_notification_loading = f_o_throw_notification(o_state.o_state__notifire,`updating image stich result`, 'loading');

                      f_o_ws_response(
                        o_req
                        
                      ).then(o=>{
                        if(o.b == true){
                          o_notification_loading.then(
                            o=>{
                              f_clear_o_notification(o);
                            }
                          )
                          f_o_throw_notification(o_state.o_state__notifire,`image has been saved`, 'success')
                        }
                      })
                    }
                }
                if(o_input_action.s_name == o_mod_autogenerated.o_input_action__clear_image_stitch.s_name){
                  if(
                    b_down && !b_down__last && !o_state.b_render__settings
                    ){
                      let s_ymd_hms = f_s_ymd_hms__from_n_ts_ms_utc(new Date().getTime()).split(' ').join('_');

                      let o_req = {
                        s_name_function: s_name_ws_action__f_update_image_stitching_result,
                        s_name_file:`${s_ymd_hms}.png`
                      };
                      let o_notification_loading = f_o_throw_notification(o_state.o_state__notifire,`updating image stich result`, 'loading');

                      f_o_ws_response(
                        o_req
                        
                      ).then(o=>{
                        if(o.b == true){
                          o_notification_loading.then(
                            o=>{
                              f_clear_o_notification(o);
                            }
                          )
                          f_o_throw_notification(o_state.o_state__notifire,`image has been saved`, 'success')
                        }
                      })
                    }
                }
            }

            // console.log({b_any_input})
            if(b_any_input){
              if(s_overlay_info_tmp_text != ''){
                o_state.s_overlay_info_tmp_text = s_overlay_info_tmp_text;
              }
            }
            // for(let o_keyboard_key of o_state.a_o_keyboard_key){
              
            //   if(o_keyboard_key.s_name == 'Escape'){
            //     v_o_keyboard_key__esc = o_keyboard_key
            //   }
            //   if(
            //     o_keyboard_key.s_name == 'y'
            //     && o_keyboard_key?.b_down != o_keyboard_key?.b_down__last
            //   ){
            //     let s_event = (o_keyboard_key?.b_down) ? 'click': 'mouseup';
            //     var o_event = new MouseEvent(s_event, {
            //         bubbles: true,
            //         cancelable: true,
            //         view: window
            //     });
            //     console.log(o_event)
            //     a_o_el_under_cursor_virtual.forEach(o=>{o.dispatchEvent(o_event); o.click()})
            //   }
            //   let n_idx = [
            //     'j', 'l',// x axis - +
            //     'i', 'k',// y axis - +
            //     'u', 'o',// z axis - +
            //   ].indexOf(o_keyboard_key.s_name)
            //   if(n_idx != -1){
            //     let s_axis = ['x', 'y', 'z'][parseInt(n_idx/2)]
            //     let b_direction = n_idx%2 == 0
            //     let n_sign = (b_direction) ? -1: 1;
    
            //     if(o_keyboard_key?.b_down){
    
            //       o_state.o_cursor_virtual.o_trn[`n_${s_axis}`] += 10 * n_sign;
            //       console.log(o_state.o_cursor_virtual.o_trn[`n_${s_axis}`])
            //     }
    
            //     if(
            //       o_keyboard_key?.b_down == o_keyboard_key?.b_down__last
            //       ){
            //       continue
            //     }
    
            //     let o_js = {
            //       s_name_function:s_name_ws_action__f_control_stepper_motor,
            //       s_axis,
            //       n_rpm_nor: ((o_keyboard_key?.b_down) ? 0.3: 0.0) ,
            //       b_direction
            //     }
            //     // console.log(o_js)
                
            //     o_ws.send(JSON.stringify(o_js))
            //   }
  
  
            // }
            // Array.from(document.querySelectorAll('.hoverable')).map(o=>{
            //   o.classList.remove("hovered")
            //   return o
            // });
  
            // if(
            //   (v_o__right_meta1_button?.n_nor == 1.0
            //   && v_o__right_meta1_button_last?.n_nor == 0.0)
            //   || (v_o_keyboard_key__esc?.b_down &&  (v_o_keyboard_key__esc?.b_down != v_o_keyboard_key__esc?.b_down__last))
            //   ){
            //     o_state.b_render__settings = !o_state.b_render__settings
            //     if(!o_state.o_js__settings._b_rendering){
            //       o_state.o_js__settings._f_render()
            //       console.log('asdf')
            //     }
            //   }
              
            // if(v_o_l2?.n_nor == 1.0){
            //   //layer 2 camera control
              
            //   let n_nor_right_stick_x_axis =  f_n_signed_nor_with_threshhold( "right_stick_x_axis", 0.0)
            //   let n_nor_right_stick_y_axis =  f_n_signed_nor_with_threshhold( "right_stick_y_axis", 0.0)
            //   let n_nor_left_stick_y_axis =  f_n_signed_nor_with_threshhold( "left_stick_y_axis", 0.0)
            //   let n_nor_left_stick_x_axis =  f_n_signed_nor_with_threshhold( "left_stick_x_axis", 0.0)
            //   o_state.o_cursor_virtual.o_trn.n_x += n_nor_left_stick_x_axis*10;
            //   o_state.o_cursor_virtual.o_trn.n_y += n_nor_left_stick_y_axis*10;
            //   o_state.o_js__o_cursor_virtual._f_render();
  
            //   o_state.o_config.n_x_trn_nor+=n_nor_right_stick_x_axis*0.02;
            //   o_state.o_config.n_y_trn_nor+=n_nor_right_stick_y_axis*0.02;
            //   o_state.o_config.n_factor_scale+=n_nor_left_stick_y_axis*-0.02;
            //   o_state.o_config.n_factor_contrast-=f_n_grouped_value("direction_pad_down")*0.02;
            //   o_state.o_config.n_factor_contrast+=f_n_grouped_value("direction_pad_up")*0.02;
            //   o_state.o_config.n_factor_gamma+=f_n_grouped_value("direction_pad_right")*0.02;
            //   o_state.o_config.n_factor_gamma-=f_n_grouped_value("direction_pad_left")*0.02;
            //   let n_summand__n_idx_a_s_image_mode = 0;
            //   if(
            //     v__o_l1?.n_nor == 1.0 
            //     && v__o_l1__last?.n_nor == 0.0
            //   ){
            //     n_summand__n_idx_a_s_image_mode = -1
            //   }
            //   if(
            //     v__o_r1?.n_nor == 1.0 
            //     && v__o_r1__last?.n_nor == 0.0
            //   ){
            //     n_summand__n_idx_a_s_image_mode = +1
            //   }
            //   if(n_summand__n_idx_a_s_image_mode != 0){
            //     o_state.o_config.n_idx_a_s_image_mode = (o_state.o_config.n_idx_a_s_image_mode+n_summand__n_idx_a_s_image_mode);
            //     if(o_state.o_config.n_idx_a_s_image_mode < 0){
            //       o_state.o_config.n_idx_a_s_image_mode = o_state.o_config.a_s_image_mode.length-1
            //     }
            //     if(o_state.o_config.n_idx_a_s_image_mode > (o_state.o_config.a_s_image_mode.length-1)){
            //       o_state.o_config.n_idx_a_s_image_mode = 0;
            //     }
            //     // console.log(o_state.o_config.n_idx_a_s_image_mode)
            //   }
            // }
            // if(v_o__left_meta1_button_last?.n_nor == 1.0){
            //   f_reset_image_manipulation();
            // }
          }


            o_state.b_display_info_tmp_text =  ((window.performance.now()-o_state.n_wpn_last_input) < o_state.n_ms_delta_max_info_tmp_text)? true : false;
            // console.log(o_state.b_display_info_tmp_text)
            if((o_state.b_display_info_tmp_text__last == false && o_state.b_display_info_tmp_text == false)){
            }else{
              if(!o_state.b_display_info_tmp_text){
                o_state.s_overlay_info_tmp_text = ''
              }
              o_state?.o_js__info_tmp_text._f_render();
            }
            o_state.b_display_info_tmp_text__last = o_state.b_display_info_tmp_text

            let n_b_display_image_modes = ((window.performance.now()-o_state.n_wpn_last_input) < o_state.n_ms_delta_max_display_image_mode)? 1.0 : 0.0;
            // console.log(window.performance.now()-o_state.n_wpn_last_input)
            f_update_data_in_o_gpu_gateway(
                {
                    o_scl_canvas: [
                          o_el_vid?.videoWidth,
                          o_el_vid?.videoHeight
                    ],
                    n_b_display_image_modes: n_b_display_image_modes, //(parseInt(window.performance.now()/1000.)%2) == 1 ? 1.0 : 0.0,
                    n_idx_a_s_image_mode: o_state.o_config.n_idx_a_s_image_mode, 
                    n_factor_scale: o_state.o_config.n_factor_scale,
                    n_x_trn_nor: o_state.o_config.n_x_trn_nor,
                    n_y_trn_nor: o_state.o_config.n_y_trn_nor,
                    n_factor_brightness: o_state.o_config.n_factor_brightness,
                    n_factor_contrast: o_state.o_config.n_factor_contrast,
                    n_factor_gamma: o_state.o_config.n_factor_gamma,
                    n_ms_time: window.performance.now(), 
                    image_from_video: f_o_gpu_texture__from_o_web_api_object(
                      o_el_vid
                    ),
                }, 
                o_gpu_gateway, 
            )
            f_render_o_gpu_gateway(
                o_gpu_gateway, 
            );
  
            // o_state.o_js__o_cursor_virtual._f_render()
            

            // needs to be at the end
            // an o_input_sensor comes with a n_nor__last, but this is the last input value when the server read out the controller and not the last readout in the rendering funtion
            // therefore some inputs could be skipped when using this value, so we have to cache the last value from the last render function call here ... 

            if(o_state?.v_o_input_device?.a_o_input_sensor){

              o_state.v_o_input_device.a_o_input_sensor = o_state?.v_o_input_device?.a_o_input_sensor?.map(o=>{
                o.n_nor__last = o.n_nor
                return o
              })
            }
            o_state.a_o_keyboard_key = o_state.a_o_keyboard_key.map(o=>{
              o.b_down__last = o?.b_down
              return o
            })

            o_state.o_config.n_idx_a_o_action_layer__last = o_state.o_config.n_idx_a_o_action_layer
            // Add your WebGL drawing code here to manipulate the video frame
            // gl.drawArrays(gl.TRIANGLES, 0, 6);
        }
        n_ms_last = n_ms;
      }
      requestAnimationFrame(f_render);

  }
  
  f_render();
  f_resize_canvas();
  f_resize_canvas();
  f_update_input_mapping_references();

}



// window.addEventListener('keydown', async (o_e)=>{
//   [
//     ['q',"n_factor_scale", + 0.01], 
//     ['e',"n_factor_scale", - 0.01],    
//     ['w',"n_y_trn_nor", + 0.01],    
//     ['s',"n_y_trn_nor", - 0.01],    
//     ['a',"n_x_trn_nor", - 0.01],    
//     ['d',"n_x_trn_nor", + 0.01],    
//     ['r',"n_factor_brightness", - 0.01],    
//     ['f',"n_factor_brightness", + 0.01],    
//     ['t',"n_factor_contrast", - 0.01],    
//     ['g',"n_factor_contrast", + 0.01],    
//     ['y',"n_factor_gamma", - 0.01],    
//     ['h',"n_factor_gamma", + 0.01]
// ].map(a_v =>{
//   if(o_e.key == a_v[0]){
//     o_state[a_v[1]] += a_v[2]
//     o_state[`o_js__${a_v[1]}`]._f_render()
//   }
// })

// if(o_e.key == 'm'){
//   o_state.o_config.n_idx_a_s_image_mode = (o_state.o_config.n_idx_a_s_image_mode + 1)%o_state.o_config.a_s_image_mode.length;
// }
// if(o_e.key == ' '){

//     await f_o_throw_notification(o_state.o_state__notifire,`image has been saved`, 'success')
  
//     o_state.f_captureAndSendImage()
//     // Convert canvas to a data URL (Base64 image)
//     const s_data_url = o_el_canvas.toDataURL('image/jpeg');

    
//     let o_resp = await fetch(
//         "https://api.openai.com/v1/chat/completions", 
//         {
//             headers: {
//                 "Content-Type":" application/json" ,
//                 "Authorization":`Bearer ${o_state.s_api_key_openai}`,
//             }, 
//             body: JSON.stringify(
//                 {
//                     "model": "gpt-4-turbo",
//                     "messages": [
//                       {
//                         "role": "user",
//                         "content": [
//                           {
//                             "type": "text",
//                             "text": o_state.s_prompt_image_ai_generic
//                           },
//                           {
//                             "type": "image_url",
//                             "image_url": {
//                               "url": s_data_url
//                             }
//                           }
//                         ]
//                       }
//                     ],
//                     "max_tokens": 300
//                   }
//             )
//         }
//     )   
//     let o_parsed = o_resp.json();
//     console.log(o_parsed);
//     window.o_parsed = o_parsed

// }

// })
let f_add_text_to_image = async function(s_data_url){
  return new Promise((f_res)=>{

    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const image = new Image();
  
    image.onload = () => {
      canvas.width = image.width;
      canvas.height = image.height;
      ctx.drawImage(image, 0, 0);
      const text = new Date().toLocaleString();
      const xPosition = 10; // X position of the text
      const yPosition = 30; // Y position of the text
      ctx.font = '20px Arial';
      ctx.lineWidth = 3; // Width of the outline
      ctx.strokeStyle = 'black'; // Color of the outline
      ctx.strokeText(text, xPosition, yPosition); // Outline the text
      ctx.fillStyle = 'white'; // Color of the text
      ctx.fillText(text, xPosition, yPosition); // Fill the text
      const s_data_url_with_text = canvas.toDataURL();
      // console.log(s_data_url_with_text); // This logs the new Data URL
      // You can also display the new image on the page
      // document.getElementById('timestampedImage').src = s_data_url_with_text;
      return f_res(s_data_url_with_text)
    };
  
    image.src = s_data_url;
  })
}
let f_update_o_from_n_u32_id = function(s_name_model, n_u32_id){
  let o = o_state[`a_${s_name_model.toLowerCase()}`].find(
    o=>{
      return o?.n_u32_id == n_u32_id
    }
  )
  o_state[s_name_model.toLowerCase()] = o; 
}



// Listen for messages
o_ws.addEventListener('message', function (event) {
  let v_o = null;
  try {
    v_o = JSON.parse(event.data);
    
  } catch (error) {
    
  }

  if(v_o?.o_input_device){
    o_state.v_o_input_device = v_o.o_input_device;
  }

    // console.log('Message from server ', event.data);
});

// Listen for possible errors
o_ws.addEventListener('error', function (event) {
    console.log('WebSocket error: ', event);
});

// Listen for when the socket closes
o_ws.addEventListener('close', function (event) {
    console.log('WebSocket is closed now.');
});


let a_s_name_property_timestamp = [
  'n_u64_ts_ms_ut__created',
  `n_u64_ts_ms_ut__updated`
]


o_state.f_captureAndSendImage = function() {
  // o_el_canvas.width = o_el_vid?.videoWidth
  // o_el_canvas.height = o_el_vid?.videoHeight
  // o_ctx.drawImage(o_el_vid, 0, 0, o_el_vid.videoWidth, o_el_vid.videoHeight);
  
    // Convert canvas to a data URL (Base64 image)
    const s_data_url = o_el_canvas.toDataURL('image/png');
    // Send JSON data to WebSocket server
    o_ws.send(
      JSON.stringify({
        s_data_url: s_data_url,
      })
    );
    
}

let f_resize_canvas = ()=>{
  let n_dpr = window.devicePixelRatio || 1;
  o_el_canvas.width = o_el_vid.videoWidth * n_dpr
  o_el_canvas.height = o_el_vid.videoHeight * n_dpr
  let gl = o_gpu_gateway.o_ctx;
gl.viewport(0, 0, o_el_canvas.width, o_el_canvas.height);
  // f_update_data_in_o_gpu_gateway(
  //     {o_scl_canvas: [
  //         o_el_canvas.width,
  //         o_el_canvas.height
  //     ]}, 
  //     o_gpu_gateway, 
  // )
}

window.addEventListener('resize',()=>{
  f_resize_canvas()
});


try{
  f_start_render_loop();
}catch(o_e){
  console.error(o_e)
}
f_resize_canvas()





window.addEventListener('pointermove', (o_e)=>{
  o_state.o_trn_nor_mouse = [
      (o_e.clientX / window.innerWidth), 
      1.-(o_e.clientY / window.innerHeight), 
  ];

  f_update_data_in_o_gpu_gateway(
      {
          o_trn_nor_mouse: o_state.o_trn_nor_mouse_last,
          o_trn_nor_mouse_last: o_state.o_trn_nor_mouse, 
      }, 
      o_gpu_gateway, 
  )
  o_state.o_trn_nor_mouse_last = o_state.o_trn_nor_mouse
})

let s_svg_original = await (await fetch("./gamepad.svg")).text();

let f_o_svg = function(
  o_s_name_input_s_description, 
  s_layer
){
  let s_svg = s_svg_original;
  let b_face_button_up_down_different = ((
    typeof o_s_name_input_s_description?.face_button_bottom == 'string'
    || typeof o_s_name_input_s_description?.face_button_top == 'string'
    ) && o_s_name_input_s_description?.face_button_bottom != o_s_name_input_s_description?.face_button_top)
    b_face_button_up_down_different = !(o_s_name_input_s_description?.face_button_bottom.trim() == '' || o_s_name_input_s_description?.face_button_top.trim() == '')
    if(!b_face_button_up_down_different){
    s_svg = s_svg.replace(`class="face_button_up_down_single"`, 'class="face_button_up_down_single" display="none"')
    s_svg = s_svg.replace(`class="face_button_up_down_single"`, 'class="face_button_up_down_single" display="none"')

  }else{
    s_svg = s_svg.replace(`class="face_button_up_down_combiner"`, 'class="face_button_up_down_combiner" display="none"')
    s_svg = s_svg.replace(`class="face_button_up_down_single"`, 'class="face_button_up_down_single" display="none"')
  }
  let b_face_button_left_right_different = ((
    typeof o_s_name_input_s_description?.face_button_left == 'string'
    || typeof o_s_name_input_s_description?.face_button_right == 'string'
    ) && o_s_name_input_s_description?.face_button_left != o_s_name_input_s_description?.face_button_right)
    b_face_button_left_right_different = !(o_s_name_input_s_description?.face_button_left.trim() == '' || o_s_name_input_s_description?.face_button_right.trim() == '')
    if(!b_face_button_left_right_different){
    s_svg = s_svg.replace(`class="face_button_left_right_single"`, 'class="face_button_left_right_single" display="none"')
  }else{
    s_svg = s_svg.replace(`class="face_button_left_right_combiner"`, 'class="face_button_left_right_combiner" display="none"')
  }
  
  let b_direction_pad_up_down_different = ((
    typeof o_s_name_input_s_description?.direction_pad_down == 'string'
    || typeof o_s_name_input_s_description?.direction_pad_up == 'string'
    ) && o_s_name_input_s_description?.direction_pad_down != o_s_name_input_s_description?.direction_pad_up)
    b_direction_pad_up_down_different = !(o_s_name_input_s_description?.direction_pad_down.trim() == '' || o_s_name_input_s_description?.direction_pad_up.trim() == '')
    if(!b_direction_pad_up_down_different){
    s_svg = s_svg.replace(`class="direction_pad_up_down_single"`, 'class="direction_pad_up_down_single" display="none"')
  }else{
    s_svg = s_svg.replace(`class="direction_pad_up_down_combiner"`, 'class="direction_pad_up_down_combiner" display="none"')
  }
  let b_direction_pad_left_right_different = ((
    typeof o_s_name_input_s_description?.direction_pad_left == 'string'
    || typeof o_s_name_input_s_description?.direction_pad_right == 'string'
    ) && o_s_name_input_s_description?.direction_pad_left != o_s_name_input_s_description?.direction_pad_right)
    b_direction_pad_left_right_different = !(o_s_name_input_s_description?.direction_pad_left.trim() == '' || o_s_name_input_s_description?.direction_pad_right.trim() == '')

    if(!b_direction_pad_left_right_different){
    s_svg = s_svg.replace(`class="direction_pad_left_right_single"`, 'class="direction_pad_left_right_single" display="none"')
  }else{
    s_svg = s_svg.replace(`class="direction_pad_left_right_combiner"`, 'class="direction_pad_left_right_combiner" display="none"')
  }
  

  return {
    a_o:[   
        {
          class: "gamepad_controls",
          a_o: [
            {
              class: "svg",
              innerHTML: s_svg
            }, 
            {
              class: "layer", 
              innerText: s_layer
            },
            Object.keys(o_s_name_input_s_description).map(s=>{
              return {
                class: `item ${s}`, 
                a_o:[
                  {
                    class: "text", 
                    innerText: o_s_name_input_s_description[s],
                  },
                ]
              }
            })
          ]
        }
    ]
}
}


document.body.appendChild(
  await f_o_html__and_make_renderable(
      {
          s_tag: 'div', 
          class: "app inputs",
          a_o: [
            ...o_state.a_o_input_font_icon.map(o=>{
              return {
              b_render: (false), //'debug' fonts, show all fonts
                style: 'display:flex;flex-direction:row',

                a_o: [
                  ...a_s_name_font.map(s=>{
                    return {
                      class: f_s_class__from_s_name_font(s), 
                      innerText: o.s_char,
                    }
                  })
                ]
              }
            }),
            Object.assign(
              o_state,
              {
                  o_js__o_cursor_virtual: {
                      f_o_jsh: ()=>{
                          return {
                              a_o:[   
                                  
                                  {
                                    class: "o_cursor_virtual", 
                                    style: [
                                      `position:fixed`, 
                                      `left: ${o_state.o_cursor_virtual.o_trn.n_x}px`,
                                      `top: ${o_state.o_cursor_virtual.o_trn.n_y}px`,
                                    ].join(';'), 
                                    a_o: [
                                      {
                                        class: "r1", 
                                      }, 
                                      {
                                        class: "r2", 
                                      },
                                      {
                                        class: "r3", 
                                      }
                                    ]
                                  }
                              ]
                          }
                      }
                  }
              }
          
          ).o_js__o_cursor_virtual,


            Object.assign(
              o_state, 
              {
                o_js__overlay: {
                  f_o_jsh:()=>{
                    return {
                      class : 'overlay',
                      a_o: [
                        Object.assign(
                          o_state, 
                          {
                            o_js__info_tmp_text: {
                              f_o_jsh:()=>{
                                return {
                                  class: "info_tmp_text",
                                  b_render: o_state.b_display_info_tmp_text,
                                  innerText: o_state.s_overlay_info_tmp_text
                                }
                              }
                            }
                          },
                        ).o_js__info_tmp_text,
                        Object.assign(
                          o_state,
                          {
                            o_js__a_s_data_url__for_stacking: {
                              f_o_jsh: () => {
                                return {
                                  a_o: o_state.a_s_data_url__for_stacking.map(
                                    s=> {
                                      return {
                                        s_tag: "img", 
                                        style: `border:1px solid white; outline: 1px solid black;`,
                                        src: s
                                      }
                                    }
                                  )
                                }
                              }
                            }
                          }
                        ).o_js__a_s_data_url__for_stacking,
                        Object.assign(
                          o_state, 
                          {
                            o_js__stitch_result: {
                              f_o_jsh: ()=>{
                                return {
                                  s_tag: "img", 
                                  style: [
                                    `top:0`,
                                    `right:0`, 
                                    `width:300px`
                                  ].join(';'),
                                  src: o_state.s_url_image_stitch_result
                                }
                              }
                            }
                          }
                        ).o_js__stitch_result,
                        Object.assign(
                          o_state, 
                          {
                            o_js__o_action_layer: 
                            {
                              f_o_jsh: ()=>{
                                
                                let o_action_layer = o_state.o_config.a_o_action_layer[o_state.o_config.n_idx_a_o_action_layer];
                                
                                return {
                                  class: "action_layer hovered",
                                  style: "display:flex;flex-direction: column !important;align-items: flex-end;",
                                  a_o: [
                                    ...o_state.o_config.a_o_input_action_mapping__layer_switch.map(o_input_action_mapping=>{
                                      let v_o_input_font = o_state.a_o_input_font_icon.find(
                                        o2=>{
                                          return o2.s_name_input == o_input_action_mapping.s_name_input__controller
                                        }
                                      )
                                      return {
                                        style: "display:flex; flex-direction:row;justify-content:space-between;align-items:center",

                                        a_o: [
                                          {
                                            innerText: o_input_action_mapping.o_input_action.s_nicename
                                          }, 
                                          {
                                            // s_tag: "button", 
                                            style: "display:flex; flex-direction:row;justify-content:space-between;align-items:center",
                                            a_o: [
                                              {
                                                class: 'keyboard_char',
                                                innerText: o_input_action_mapping.s_name_char_keyboard.slice(0,3).toUpperCase()
                                              },
                                              {
                                                class: f_s_class__from_s_name_font(v_o_input_font?.s_name_font),
                                                innerText: v_o_input_font?.s_char
                                              }
                                            ]
                                          }
                                          // f_o_jsh__keyicons(o.s_name_input)
                                        ]
                                      }

                                    }),
                                    {
                                      s_tag: 'h6',
                                      innerText: `Action Layer: ${o_state.o_config.n_idx_a_o_action_layer}`//${o_action_layer.s_name}`
                                    },
                                    ...o_action_layer.a_o_input_action_mapping.map(
                                      o_input_action_mapping=>{
                                        let v_o_input_font = o_state.a_o_input_font_icon.find(
                                          o2=>{
                                            return o2.s_name_input == o_input_action_mapping.s_name_input__controller
                                          }
                                        )
                                        let s_nice_name = o_input_action_mapping.o_input_action.s_nicename

                                        if(o_input_action_mapping.o_input_action.s_name == o_mod_autogenerated.o_input_action__finish_focus_stack.s_name){
                                          s_nice_name = `Finish focus stack (${o_state.a_s_data_url__for_stacking.length})`
                                        }
                                        return {
                                          style: "display:flex; flex-direction:row;justify-content:space-between;align-items:center",

                                          a_o: [
                                            {
                                              innerText: s_nice_name
                                            }, 
                                            {
                                              // s_tag: "button", 
                                              style: "display:flex; flex-direction:row;justify-content:space-between;align-items:center",
                                              a_o: [
                                                {
                                                  class: 'keyboard_char',
                                                  innerText: o_input_action_mapping.s_name_char_keyboard.slice(0,3).toUpperCase()
                                                },
                                                {
                                                  class: f_s_class__from_s_name_font(v_o_input_font?.s_name_font),
                                                  innerText: v_o_input_font?.s_char
                                                }
                                              ]
                                            }
                                            // f_o_jsh__keyicons(o.s_name_input)
                                          ]

                                        }
                                      }
                                    )
                                  ]
                                }
                              }
                            }
                          }
                        ).o_js__o_action_layer
                      ]
                    }
                  }
                }
              }
            ).o_js__overlay,
            Object.assign(
              o_state,
              {
                  o_js__settings: {
                      f_o_jsh: ()=>{
                        return {
                          class: "settings",
                          b_render: o_state.b_render__settings,
                          a_o: [
                            {
                              s_tag: "h2",
                              innerText: "Active Microscope"
                            },
                            [
                              "O_microscope_brand",
                              "O_microscope_objective",
                              "O_microscope",
                            ].map(s_name_model=>{
                              let s_name_prop_array = `a_${s_name_model.toLowerCase()}`
                              let s_name_prop_o_js = `o_js__${s_name_model.toLowerCase()}`
                              return Object.assign(
                                o_state,
                                {
                                  [s_name_prop_o_js]:{
                                    f_o_jsh:()=>{
                                      return {
                                        a_o: [
                                          {
                                            innerText: s_name_model,
                                          },
                                          {
                                            s_tag: "select", 
                                            a_o: [
                                              ...o_state[s_name_prop_array].map(o=>{
                                                return {
                                                  s_tag: 'option', 
                                                  innerText: o[Object.keys(o).sort().reverse()[0]], 
                                                  ...((o_state?.[s_name_model.toLowerCase()] == o)?
                                                    {selected: true} : {}), 
                                                    value: o.n_u32_id
                                                }
                                              })
                                            ],
                                            oninput: async (o_e)=>{
                                              let n_u32_id = parseInt(o_e.target.value)
                                              f_update_o_from_n_u32_id(s_name_model, n_u32_id);
                                              o_state.o_config[`n_u32_id__${s_name_model}`] = n_u32_id;
                                              console.log(n_u32_id)
                                              let o2 = await f_o_ws_response({
                                                s_name_function: s_name_ws_action__f_b_write_s_text_file,
                                                s_path_rel: 'o_config.json',
                                                s_text: JSON.stringify(o_state.o_config, null, 4)
                                              });
                                              console.log(o2)
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                }
                              )[s_name_prop_o_js]
                            }),
                            Object.assign(
                              o_state, 
                              {
                                o_js__a_s_url_screenshot: {
                                  f_o_jsh:()=>{
                                    return {
                                      class: "screenshots_from_session",
                                      a_o: [
                                        {
                                          s_tag: "h2",
                                          innerText: "Screenshots from this session"
                                        },
                                        ...o_state.a_s_url_screenshot.map(s=>{
                                          return {
                                            s_tag: "img", 
                                            src: s
                                          }
                                        })
                                      ]
                                    }
                                  }
                                }
                              }
                            ).o_js__a_s_url_screenshot,
                            
                            Object.assign(
                              o_state, 
                              {
                                o_js__action_mapping: {
                                  f_o_jsh:()=>{
                                    f_update_input_mapping_references();
                                    let f_o_jsh = function(o_input_action_mapping, s_name){
                                      let v_o_input_font = o_state.a_o_input_font_icon.find(
                                        o2=>{
                                          return o2.s_name_input == o_input_action_mapping.s_name_input__controller
                                        }
                                      )
                                      if(!s_name){
                                        s_name = o_input_action_mapping.s_name
                                      }
                                      return {
                                        class: "hoverable",
                                        style: "display:flex; flex-direction:row;justify-content:space-between;align-items:center",
                                        a_o: [
                                          {
                                            onpointerup: ()=>{
                                              o_state.o_config.o_input_action_mapping = o_input_action_mapping;
                                              o_state.o_js__action_mapping?._f_render?.();
                                            },
                                            class: "clickable",
                                            style: "display:flex; flex-direction:row;justify-content:space-between;align-items:center",
                                            a_o: [
                                              {
                                                s_tag: "button", 
                                                style: "display:flex;flex-direction:row",
                                                a_o: [
                                                  {
                                                    class: 'keyboard_char',
                                                    innerText: (o_state.o_config?.o_input_action_mapping?.o_input_action?.s_name == o_input_action_mapping?.o_input_action.s_name ) ? '?': o_input_action_mapping.s_name_char_keyboard.toUpperCase()
                                                  },
                                                  {
                                                    class: f_s_class__from_s_name_font(v_o_input_font?.s_name_font),
                                                    innerText: (o_state.o_config.o_input_action_mapping?.o_input_action?.s_name == o_input_action_mapping?.o_input_action?.s_name ) ? '?':  v_o_input_font?.s_char
                                                  }, 
                                                ]
                                              },
                                              {
                                                s_tag: "button", 
                                                innerText: "remove mapping", 
                                                onpointerup: ()=>{
                                                  for(let o of o_state.o_config.a_o_action_layer){
                                                    o.a_o_input_action_mapping = o.a_o_input_action_mapping.filter(
                                                      o=>o!=o_input_action_mapping
                                                    )
                                                  }
                                                  o_state.o_js__action_mapping?._f_render?.();

                                                }
                                              }
                                            ]
                                          }
                                          // f_o_jsh__keyicons(o.s_name_input)
                                        ]
                                      }
                                    }
                                    return {
                                      class: "action_mapping", 
                                      a_o:[
                                        {
                                          s_tag: "h2", 
                                          innerText: "Switch type"
                                        },
                                        Object.assign(
                                          o_state, 
                                          {
                                            o_js__switch_type: {
                                              f_o_jsh: ()=>{
                                                return {
                                                  a_o: [
                                                    {
                                                      class: "hoverable",
                                                      style: "display:flex; flex-direction:row;justify-content:space-between;align-items:center",
                                                      a_o: [
                                                        {
                                                          innerText: `One-click-toggle`
                                                        }, 
                                                        {
                                                          s_tag: "button", 
                                                          onclick: ()=>{
                                                            o_state.o_config.b_layer_switch_type_on_click_cycle_through = true; 
                                                            o_state.o_js__switch_type?._f_render?.();
                                                          },
                                                          innerHTML: (o_state.o_config.b_layer_switch_type_on_click_cycle_through) ? 'x': '&nbsp;', 
                                                        }, 
                                                        f_o_jsh(
                                                          o_state.o_input_action_mapping__next_action_layer,
                                                          'Next layer'
                                                        ),
                                                        f_o_jsh(
                                                          o_state.o_input_action_mapping__prev_action_layer,
                                                          'Previous layer'
                                                        ),
                                                        // f_o_jsh__keyicons(o.s_name_input)
                                                      ]
                                                    },
                                                    
                                                    {
                                                      class: "hoverable",
                                                      style: "display:flex; flex-direction:row;justify-content:space-between;align-items:center",
                                                      a_o: [
                                                        {
                                                          innerText: `Dedicated-button-toggle`
                                                        }, 
                                                        {
                                                          s_tag: "button", 
                                                          onclick: ()=>{
                                                            o_state.o_config.b_layer_switch_type_on_click_cycle_through = false; 
                                                            o_state.o_js__switch_type?._f_render?.();
                                                          },
                                                          innerHTML: (!o_state.o_config.b_layer_switch_type_on_click_cycle_through) ? 'x': '&nbsp;', 
                                                        },
                                                        {
                                                          innerText: `Keep-pressed-to-toggle`
                                                        }, 
                                                        {
                                                          s_tag: "button", 
                                                          onclick: ()=>{
                                                            o_state.o_config.b_layer_switch_keep_pressed_required = !o_state.o_config.b_layer_switch_keep_pressed_required; 
                                                            o_state.o_js__switch_type?._f_render?.();
                                                          },
                                                          innerHTML: (o_state.o_config.b_layer_switch_keep_pressed_required) ? 'x': '&nbsp;', 
                                                        }, 
                                                        f_o_jsh(
                                                          o_state.o_input_action_mapping__keep_hold_down_toggle_layer2,
                                                          'Layer 2'
                                                        ),
                                                        f_o_jsh(
                                                          o_state.o_input_action_mapping__keep_hold_down_toggle_layer3,
                                                          'Layer 3'
                                                        ),
                                                        // f_o_jsh__keyicons(o.s_name_input)
                                                      ]
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        ).o_js__switch_type,
                                        {
                                          s_tag: "h2", 
                                          innerText: "Action Layers", 
                                        },
                                        {
                                          class: "weak_contrast_font",
                                          innerText: "There are three layers and a huge amount of actions. You can assign/map inputs to different actions on each layer."
                                        }, 
                                        Object.assign(
                                          {
                                            o_js__a_o_action_layer: {
                                              f_o_jsh:()=>{
                                                return {
                                                  a_o:  o_state.o_config.a_o_action_layer.map((o_action_layer, n_idx)=>{
                                                    return {
                                                      a_o: [
                                                        {
                                                          s_tag: "h3",
                                                          innerText: `Layer ${parseInt(n_idx)+1}`
                                                        },
                                                        {
                                                          a_o: [
                                                            ...o_action_layer.a_o_input_action_mapping.map(o_input_action_mapping =>{
                                                              return {
                                                                a_o :[
                                                                  {
                                                                    s_tag: "h4",
                                                                    innerText: o_input_action_mapping.o_input_action.s_name
                                                                  },
                                                                  {
                                                                    class: "weak_contrast_font",
                                                                    innerText: o_input_action_mapping.o_input_action.s_description
                                                                  }, 
                                                                  f_o_jsh(o_input_action_mapping)
                                                                ]
                                                              }
                                                            })
                                                          ]
                                                        }, 
                                                        {
                                                          a_o: [
                                                            {
                                                              s_tag: "select", 
                                                              a_o: [
                                                                ...o_state.a_o_input_action.map(o_input_action=>{
                                                                  return {
                                                                    s_tag: "option", 
                                                                    innerText: o_input_action.s_name, 
                                                                    value: o_input_action.s_name
                                                                  }
                                                                })
                                                              ], 
                                                              onchange: (o_e)=>{
                                                                let o_input_action = o_state.a_o_input_action.find(o=>{
                                                                  return o.s_name == o_e.target.value
                                                                });
                                                                o_action_layer.o_input_action__tmp_selected = o_input_action
                                                              }
                                                            },
                                                            {
                                                              s_tag: "button",
                                                              innerText: 'add mapping', 
                                                              onpointerup: (o_e)=>{
                                                                o_action_layer.a_o_input_action_mapping.push(
                                                                  new O_input_action_mapping(
                                                                    o_action_layer.o_input_action__tmp_selected,
                                                                    '', 
                                                                    'l',
                                                                    false
                                                                  )
                                                                )
                                                                o_state.o_js__action_mapping?._f_render?.();
                                                                
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  })
                                                }
                                              }
                                            }
                                          }
                                        ).o_js__a_o_action_layer
                                        // }
                                        //   The first is to have two buttons which can be pressed once and then the layer is switched to the next or previous.
                                        //   The second
                                        //   `
                                        // }
                                      ]
                                    } 
                                  }
                                }
                              }
                            ).o_js__action_mapping,
                            

                            Object.assign(
                              o_state,
                              {
                                  o_js__s_prompt_image_ai_generic: {
                                      f_o_jsh: ()=>{
                                          return {
                                              class: 'hoverable',
                                              a_o:[   
                                                  {
                                                      innerText: "prompt_for_ai"
                                                  }, 
                                                  {
                                                      s_tag: "input", 
                                                      type: 'text', 
                                                      value: o_state.s_prompt_image_ai_generic,
                                                      oninput: (o_e)=>{
                                                          o_state.s_prompt_image_ai_generic = o_e.target.value
                                                      }
                                                  }
                                              ]
                                          }
                                      }
                                  }
                              }
                          
                          ).o_js__s_prompt_image_ai_generic,
                          Object.assign(
                              o_state,
                              {
                                  o_js__s_api_key_openai: {
                                      f_o_jsh: ()=>{
                                          return {
                                              a_o:[   
                                                  {
                                                      innerText: "api_key_openai"
                                                  }, 
                                                  {
                                                      s_tag: "input", 
                                                      type: 'text', 
                                                      oninput: (o_e)=>{
                                                          o_state.s_api_key_openai = o_e.target.value
              
                                                          clearTimeout(o_state.n_id_timeout)
                                                          o_state.n_id_timeout = setTimeout( async ()=>{
                                                              let o = await fetch(
                                                                  "https://api.openai.com/v1/organizations",
                                                                  {
                                                                      headers: {
                                                                          "Authorization": `Bearer ${o_state.s_api_key_openai}`
                                                                      }
                                                                  }    
                                                              );
                                                              let b_invalid = false;
                                                              if(!o.ok){
                                                                  b_invalid = true;
                                                              }
                                                              try {
                                                                  let o_parsed = await o.json();
                                                                  await f_o_throw_notification(o_state.o_state__notifire,`valid api key added`, 'success')
              
                                                              } catch (error) {
                                                                  // f_o_throw_notification('api key invalid')
                                                                  b_invalid = true
                                                              }
                                                              if(b_invalid){
                                                                  await f_o_throw_notification(o_state.o_state__notifire,`invalid api key: ${o_state.s_api_key_openai}!`, 'warning')
                                                              }
              
                                                          },3000)
                                                      }
                                                  }
                                              ]
                                          }
                                      }
                                  }
                              }
                          
                          ).o_js__s_api_key_openai,
                          ...[
                              "n_factor_scale",
                              "n_factor_brightness",
                              "n_factor_contrast",
                              "n_factor_gamma",
                              "n_x_trn_nor",
                              "n_y_trn_nor",
                          ].map(s_prop=>{
                              let s_prop2 = `o_js__${s_prop}`
                              return Object.assign(
                                  o_state,
                                  {
                                      [s_prop2]: {
                                          f_o_jsh:()=>{
                                              return {
                                                  a_o: [
                                                      {
                                                          s_tag: "label", 
                                                          innerText: s_prop
                                                      },
                                                      {
                                                          s_tag: "input",
                                                          type: 'range', 
                                                          step: 0.01, 
                                                          min: -1,
                                                          max:3.,
                                                          value:  o_state[s_prop],
                                                          oninput: (o_e)=>{
                                                              let n = parseFloat(o_e.target.value)
                                                              o_state[s_prop] = n;
                                                          }
                                                      }
                                                  ]
                                              }
                                          }
                                      }
                                  }
                              )[s_prop2]
                          }),
              
                            Object.assign(
                                o_state, 
                                {
                                    o_js__a_o_usb_device: {
                                        f_o_jsh: async  ()=>{
                                          let o2 = await f_o_ws_response({s_name_function: s_name_ws_action__f_o_command, s_command: 'lsusb'});
                                          o_state.a_o_usb_device = o2.s_stdout.split('\n').filter(s=>s.includes('Device ')).map(s=>{
                                            let [
                                              s_prop_bus,
                                              s_n_val_bus, 
                                              s_prop_device, 
                                              s_n_val_device, 
                                              s_prop_id, 
                                              s_val_vendor_id_product_id, 
                                            ] = s.split(' ');

                                            return {
                                              s_prop_bus,
                                              n_val_bus: parseInt(s_n_val_bus),
                                              s_prop_device,
                                              n_val_device: parseInt(s_n_val_device),
                                              s_prop_id,
                                              n_id_vendor : parseInt(`0x${s_val_vendor_id_product_id.split(":").shift()}`, 16),
                                              n_id_product : parseInt(`0x${s_val_vendor_id_product_id.split(":").pop()}`, 16),
                                              s_val_vendor_id_product_id, 
                                              s_lsusbline: s,
                                              s_name: s.split(' ').slice(6).join(' ')
                                            }
                                          })
                                          let o_usb_device = o_state.a_o_usb_device.find(o=>{
                                            o.n_id_vendor == o_state?.o_config?.n_id_vendor
                                            && o.n_id_product == o_state?.o_config?.n_id_product
                                          }) 
                                          if(o_usb_device){
                                            o_state.o_usb_device = o_usb_device;
                                            o_ws.send(
                                              JSON.stringify({
                                                s_name_function: s_name_ws_action__f_switch_usb_device, 
                                                n_id_vendor: o_usb_device.n_id_vendor,
                                                n_id_product: o_usb_device.n_id_product,
                                              })
                                            )
                                          }
                                            return {
                                                class: "a_o_usb_device",
                                                s_tag: "select", 
                                                onchange: (o_e)=>{
                                                  let o_usb_device = o_state.a_o_usb_device.find(o2=>{
                                                    return o2.s_val_vendor_id_product_id == o_e.target.value
                                                  });
                                                  if(o_usb_device){
                                                    o_state.o_usb_device = o_usb_device
                                                    // console.log(o_usb_device)
                                                    o_ws.send(
                                                      JSON.stringify({
                                                        s_name_function: s_name_ws_action__f_switch_usb_device, 
                                                        n_id_vendor: o_usb_device.n_id_vendor,
                                                        n_id_product: o_usb_device.n_id_product,
                                                      })
                                                    )
                                                    o_state.o_config.n_id_vendor = o_usb_device.n_id_vendor
                                                    o_state.o_config.n_id_product = o_usb_device.n_id_product
                                                    let o = f_o_ws_response({
                                                      s_name_function: s_name_ws_action__f_b_write_s_text_file,
                                                      s_path_rel: 'o_config.json',
                                                      s_text: JSON.stringify(o_state.o_config, null, 4)
                                                    });
                                                  }
                                                },
                                                a_o: [
                                                    ...o_state.a_o_usb_device.map(o=>{
                                                        return {
                                                            s_tag: "option",
                                                            value: o.s_val_vendor_id_product_id, 
                                                            innerText: o.s_name, 
                                                            ...(
                                                              (  
                                                              o_state?.o_config?.n_id_product == o?.n_id_product
                                                              && o_state?.o_config?.n_id_vendor == o?.n_id_vendor
                                                            ) ? {selected: true} : {})
                                                        }
                                                    })
                                                ]
                                            }
                                        }
                                    }
                                }
                            ).o_js__a_o_usb_device,
                            [
                              "O_microscope_brand",
                              "O_microscope_objective",
                              "O_microscope",
                            ].map(s_name_model=>{
                              let s_name_array = `a_${s_name_model.toLowerCase()}`;
                              return Object.assign(
                                o_state, 
                                {
                                  [`o_js__${s_name_array}`]: {
                                    f_o_jsh: ()=>{
                                      return {
                                        class: `a_o ${s_name_array}`,
                                        a_o: [
                                          {
                                            innerText: `${s_name_array}`,
                                          }, 
                                          ...[...o_state[s_name_array], new o_s_name_class[s_name_model]].map((o,n_idx)=>{
                                            let b_new_instance = n_idx == o_state[s_name_array].length
                                            if(b_new_instance){
                                              Object.keys(o).forEach(s=>o[s] = 'enter new value...')
                                              o.n_u32_id = o_state[s_name_array].at(-1).n_u32_id+1;
                                            }
                                            return {
                                              class: `o ${s_name_model.toLowerCase()} hoverable`,
                                              style: [
                                                `display:flex`, 
                                                `flex-direction: column`,
                                                `align-items:normal`
                                              ].join(';'),
                                              a_o: 
                                              [
                                                ...Object.keys(o).filter(s=>!a_s_name_property_timestamp.includes(s)).map(s_name_prop=>{
                                                  return {
                                                    style: [
                                                      `display:flex`,
                                                      `align-items:flex-end`
                                                    ].join(";"),
                                                    a_o: [
                                                      {
                                                        style: 'width: 50%; text-align:right;',
                                                        a_o:[
                                                          {
                                                            style: `overflow-wrap:break-word`,
                                                            innerText: `${s_name_prop}`,
                                                          }
                                                        ]
                                                      },
                                                      {
                                                        style: 'width:50%',
                                                        s_tag: "input", 
                                                        value: o[s_name_prop],
                                                        oninput: (o_e)=>{
                                                          let v = o_e.target.value;
                                                          if(s_name_prop.indexOf('n_f') == 0){
                                                              v = parseFloat(v)
                                                          }
                                                          if(s_name_prop.indexOf('n_u') == 0){
                                                            v = parseInt(v)
                                                          }
                                                          if(s_name_prop.indexOf('b_') == 0){
                                                              v = (v == 'true') ? true : (parseInt(v) == 1) ? true : false;
                                                          }
                                                          o[s_name_prop] = v;
                                                        }
                                                      }, 
                                                      
                                                    ]
                                                  }
                                                }),
                                                {
                                                  s_tag: 'button',
                                                  onclick: async ()=>{

                                                    if(b_new_instance){
                                                      o_state[s_name_array].push(o);
                                                    }

                                                    let o = await f_o_ws_response({
                                                      s_name_function: s_name_ws_action__f_b_write_s_text_file,
                                                      s_path_rel: `${s_name_array}.json`,
                                                      s_text: JSON.stringify(o_state[s_name_array])
                                                    });

                                                    await o_state[`o_js__${s_name_array}`]._f_render();
                                                    
                                                  }, 
                                                  innerText: (b_new_instance) ? "Create new" : "Update existing"
                                                }
                                              ] 
                                              
                                            }
                                          })
                                        ]
                                      }
                                    }
                                  }
                                }
                              )[`o_js__${s_name_array}`]
                            }),
                          ]
                        }
                      }
                  }
              }
          ).o_js__settings,

          ]
      }
  )
);
await f_o_throw_notification(o_state.o_state__notifire,`Hi, hello and Welcome !`, 'success')

// await f_o_throw_notification(o_state.o_state__notifire,'Loading, please wait !', 'warning')
// await f_clear_all_notifications(o_state.o_state__notifire);